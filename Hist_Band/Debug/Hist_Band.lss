
Hist_Band.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803f00  00000aba  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097c  00000100  00000100  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003e  00008a7c  00000a7c  00000a30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000001b  00803f04  00803f04  00000a72  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002fc4  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d47  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000902  00000000  00000000  000058f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000061fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000163d  00000000  00000000  000063bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000034d  00000000  00000000  000079f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00007d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000100 <__vectors>:
 100:	19 c0       	rjmp	.+50     	; 0x134 <__ctors_end>
 102:	33 c0       	rjmp	.+102    	; 0x16a <__bad_interrupt>
 104:	32 c0       	rjmp	.+100    	; 0x16a <__bad_interrupt>
 106:	31 c0       	rjmp	.+98     	; 0x16a <__bad_interrupt>
 108:	30 c0       	rjmp	.+96     	; 0x16a <__bad_interrupt>
 10a:	2f c0       	rjmp	.+94     	; 0x16a <__bad_interrupt>
 10c:	25 c1       	rjmp	.+586    	; 0x358 <__vector_6>
 10e:	2d c0       	rjmp	.+90     	; 0x16a <__bad_interrupt>
 110:	2c c0       	rjmp	.+88     	; 0x16a <__bad_interrupt>
 112:	2b c0       	rjmp	.+86     	; 0x16a <__bad_interrupt>
 114:	2a c0       	rjmp	.+84     	; 0x16a <__bad_interrupt>
 116:	29 c0       	rjmp	.+82     	; 0x16a <__bad_interrupt>
 118:	28 c0       	rjmp	.+80     	; 0x16a <__bad_interrupt>
 11a:	27 c0       	rjmp	.+78     	; 0x16a <__bad_interrupt>
 11c:	26 c0       	rjmp	.+76     	; 0x16a <__bad_interrupt>
 11e:	25 c0       	rjmp	.+74     	; 0x16a <__bad_interrupt>
 120:	24 c0       	rjmp	.+72     	; 0x16a <__bad_interrupt>
 122:	24 c0       	rjmp	.+72     	; 0x16c <__vector_17>
 124:	22 c0       	rjmp	.+68     	; 0x16a <__bad_interrupt>
 126:	21 c0       	rjmp	.+66     	; 0x16a <__bad_interrupt>
 128:	20 c0       	rjmp	.+64     	; 0x16a <__bad_interrupt>
 12a:	1f c0       	rjmp	.+62     	; 0x16a <__bad_interrupt>
 12c:	b6 c0       	rjmp	.+364    	; 0x29a <__vector_22>
 12e:	1d c0       	rjmp	.+58     	; 0x16a <__bad_interrupt>
 130:	1c c0       	rjmp	.+56     	; 0x16a <__bad_interrupt>
 132:	1b c0       	rjmp	.+54     	; 0x16a <__bad_interrupt>

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df e3       	ldi	r29, 0x3F	; 63
 13e:	de bf       	out	0x3e, r29	; 62

00000140 <__do_copy_data>:
 140:	1f e3       	ldi	r17, 0x3F	; 63
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	bf e3       	ldi	r27, 0x3F	; 63
 146:	ea eb       	ldi	r30, 0xBA	; 186
 148:	fa e0       	ldi	r31, 0x0A	; 10
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__do_copy_data+0x10>
 14c:	05 90       	lpm	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	a4 30       	cpi	r26, 0x04	; 4
 152:	b1 07       	cpc	r27, r17
 154:	d9 f7       	brne	.-10     	; 0x14c <__do_copy_data+0xc>

00000156 <__do_clear_bss>:
 156:	2f e3       	ldi	r18, 0x3F	; 63
 158:	a4 e0       	ldi	r26, 0x04	; 4
 15a:	bf e3       	ldi	r27, 0x3F	; 63
 15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
 15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
 160:	af 31       	cpi	r26, 0x1F	; 31
 162:	b2 07       	cpc	r27, r18
 164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>
 166:	09 d1       	rcall	.+530    	; 0x37a <main>
 168:	87 c4       	rjmp	.+2318   	; 0xa78 <_exit>

0000016a <__bad_interrupt>:
 16a:	ca cf       	rjmp	.-108    	; 0x100 <__vectors>

0000016c <__vector_17>:
Clears the Interrupt Flag: The interruption can't be triggered repeatedly until a new condition occurs
Reads the ADC Result: The ADC0 conversion data is stored in the global variable "sample"
Starts a New Conversion: The ISR triggers a new ADC conversion, ensuring that the ADC is 
continuously sampling new data and the process is ongoing.*/
ISR(ADC0_RESRDY_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	8f 93       	push	r24
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
 180:	e0 e0       	ldi	r30, 0x00	; 0
 182:	f6 e0       	ldi	r31, 0x06	; 6
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	83 87       	std	Z+11, r24	; 0x0b
	
	sample = ADC0.RES;
 188:	20 89       	ldd	r18, Z+16	; 0x10
 18a:	31 89       	ldd	r19, Z+17	; 0x11
 18c:	20 93 1d 3f 	sts	0x3F1D, r18	; 0x803f1d <sample>
 190:	30 93 1e 3f 	sts	0x3F1E, r19	; 0x803f1e <sample+0x1>
	
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
 194:	80 87       	std	Z+8, r24	; 0x08
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	8f 91       	pop	r24
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <ADC0_init>:
/*This initialization ensures that the ADC is ready to perform accurate 
conversions and trigger interrupts when new conversion results are available.*/
void ADC0_init(void)
{
	/* Disable digital input buffer */
	PORTA.PIN4CTRL &= ~PORT_ISC_gm;
 1aa:	e0 e0       	ldi	r30, 0x00	; 0
 1ac:	f4 e0       	ldi	r31, 0x04	; 4
 1ae:	84 89       	ldd	r24, Z+20	; 0x14
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 1b4:	84 89       	ldd	r24, Z+20	; 0x14
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	84 8b       	std	Z+20, r24	; 0x14
	
	/* Disable pull-up resistor */
	PORTA.PIN4CTRL &= ~PORT_PULLUPEN_bm;
 1ba:	84 89       	ldd	r24, Z+20	; 0x14
 1bc:	87 7f       	andi	r24, 0xF7	; 247
 1be:	84 8b       	std	Z+20, r24	; 0x14
	
	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	/* Voltage reference  2.5V */
 1c0:	e0 ea       	ldi	r30, 0xA0	; 160
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	80 83       	st	Z, r24
	VREF.CTRLB |= VREF_ADC0REFEN_bm;		/* Force Voltage reference */
 1ca:	81 81       	ldd	r24, Z+1	; 0x01
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	81 83       	std	Z+1, r24	; 0x01
	
	ADC0.CTRLC = ADC_PRESC_DIV8_gc |		/* CLK_PER divided by 8 */
 1d0:	e0 e0       	ldi	r30, 0x00	; 0
 1d2:	f6 e0       	ldi	r31, 0x06	; 6
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	82 83       	std	Z+2, r24	; 0x02
	ADC_REFSEL_INTREF_gc;					/* Internal reference */
	
	ADC0.CTRLA |= ADC_ENABLE_bm |			/* ADC Enable: enabled */
 1d8:	80 81       	ld	r24, Z
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 83       	st	Z, r24
	ADC_RESSEL_10BIT_gc;					/* 10-bit mode */
	
	/* Enable ADC interrupt */
	ADC0.INTCTRL = ADC_RESRDY_bm;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	82 87       	std	Z+10, r24	; 0x0a
	
	/* Select ADC channel */
	ADC0.MUXPOS = ADC_MUXPOS_AIN4_gc;
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	86 83       	std	Z+6, r24	; 0x06
 1e6:	08 95       	ret

000001e8 <ADC0_start>:
After starting the conversion, the ADC will sample the input signal, convert it to a digital value, and set an interrupt flag 
(if configured) when the conversion is complete, allowing the program to read the result.*/
void ADC0_start(void)
{
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
 1ee:	08 95       	ret

000001f0 <CLKCTRL_init>:
It sets the clock prescaler to divide the system clock by 8 and enables the prescaler.
It configures the 20 MHz internal oscillator as the clock source and disables clock output to external pins.
It waits until the clock system has stabilized and the changes are applied. */
void CLKCTRL_init(void)
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_16X_gc | CLKCTRL_PEN_bm);
 1f0:	88 ed       	ldi	r24, 0xD8	; 216
 1f2:	27 e0       	ldi	r18, 0x07	; 7
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	84 bf       	out	0x34, r24	; 52
 1f8:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, !CLKCTRL_CLKOUT_bm | CLKCTRL_CLKSEL_OSC20M_gc);
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	84 bf       	out	0x34, r24	; 52
 202:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	while (!(CLKCTRL.MCLKSTATUS));
 206:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
 20a:	88 23       	and	r24, r24
 20c:	e1 f3       	breq	.-8      	; 0x206 <CLKCTRL_init+0x16>
}
 20e:	08 95       	ret

00000210 <RTC_init>:
It sets the period value to 0x44 (68 decimal), meaning the RTC will generate an overflow event after counting to this value.
It enables the overflow interrupt, so that an interrupt is triggered when the RTC overflows,
while disabling the compare match interrupt. */
void RTC_init(void)
{
	RTC.CTRLA = RTC_PRESCALER_DIV512_gc /* 512 */
 210:	e0 e4       	ldi	r30, 0x40	; 64
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	89 e4       	ldi	r24, 0x49	; 73
 216:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp     /* Enable: enabled */
	| 0 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	RTC.PER = 0x44; /* Period: 0xd */
 218:	84 e4       	ldi	r24, 0x44	; 68
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	82 87       	std	Z+10, r24	; 0x0a
 21e:	93 87       	std	Z+11, r25	; 0x0b

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	82 83       	std	Z+2, r24	; 0x02
 224:	08 95       	ret

00000226 <GPIO_init>:
#include "gpio.h"

/*This function looks for the direction of PORTA and configures its pin 2 as an output pin*/
void GPIO_init(void)
{
	PORTA.DIR |= PIN2_bm;
 226:	e0 e0       	ldi	r30, 0x00	; 0
 228:	f4 e0       	ldi	r31, 0x04	; 4
 22a:	80 81       	ld	r24, Z
 22c:	84 60       	ori	r24, 0x04	; 4
 22e:	80 83       	st	Z, r24
 230:	08 95       	ret

00000232 <GPIO_relay>:
/*This function takes the active value (True or False) to work like:
If active = true, the relay is turned on by setting the output of pin 2 to HIGH.
If active = false, the relay is turned off by setting the output of pin 2 to LOW.*/
void GPIO_relay(bool active)
{
	if(active) {
 232:	88 23       	and	r24, r24
 234:	31 f0       	breq	.+12     	; 0x242 <GPIO_relay+0x10>
		PORTA.OUT |= PIN2_bm;
 236:	e0 e0       	ldi	r30, 0x00	; 0
 238:	f4 e0       	ldi	r31, 0x04	; 4
 23a:	84 81       	ldd	r24, Z+4	; 0x04
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	84 83       	std	Z+4, r24	; 0x04
 240:	08 95       	ret
		} else {
		PORTA.OUT &= ~PIN2_bm;
 242:	e0 e0       	ldi	r30, 0x00	; 0
 244:	f4 e0       	ldi	r31, 0x04	; 4
 246:	84 81       	ldd	r24, Z+4	; 0x04
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	84 83       	std	Z+4, r24	; 0x04
 24c:	08 95       	ret

0000024e <UART_init>:
/*This function initializes the UART with the necessary parameters like baud rate, and activating both
Receiver and Transmitter so it can get and send data though the same UART*/
void UART_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
 24e:	e0 e0       	ldi	r30, 0x00	; 0
 250:	f8 e0       	ldi	r31, 0x08	; 8
 252:	81 ea       	ldi	r24, 0xA1	; 161
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	80 87       	std	Z+8, r24	; 0x08
 258:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = USART_RXCIE_bm;  /* Receive Complete Interrupt Enable: enabled */
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	85 83       	std	Z+5, r24	; 0x05
	
	USART0.CTRLB = USART_RXEN_bm |    /* Receiver Enable: enabled */
 25e:	80 ec       	ldi	r24, 0xC0	; 192
 260:	86 83       	std	Z+6, r24	; 0x06
	USART_TXEN_bm;    /* Transmitter Enable: enabled */
	
	/* Set TxD (PB2) as output */
	PORTB.DIR |= PIN2_bm;
 262:	e0 e2       	ldi	r30, 0x20	; 32
 264:	f4 e0       	ldi	r31, 0x04	; 4
 266:	80 81       	ld	r24, Z
 268:	84 60       	ori	r24, 0x04	; 4
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <UART_SendString>:

/*This function takes a string and sends each character over UART until it reaches the end of the string (null terminator).
It ensures that each byte is sent only when the transmit buffer is empty and 
waits for the entire transmission to complete before clearing the corresponding flag.*/
void UART_SendString(const char *str)
{
 26e:	fc 01       	movw	r30, r24
	while (*str != '\0')
 270:	07 c0       	rjmp	.+14     	; 0x280 <UART_SendString+0x12>
	{
		while (!(USART0.STATUS & USART_DREIF_bm)); //wait until Tx buffer is empty
 272:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 276:	95 ff       	sbrs	r25, 5
 278:	fc cf       	rjmp	.-8      	; 0x272 <UART_SendString+0x4>
		
		USART0.TXDATAL = *str;
 27a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
		str++;
 27e:	31 96       	adiw	r30, 0x01	; 1
/*This function takes a string and sends each character over UART until it reaches the end of the string (null terminator).
It ensures that each byte is sent only when the transmit buffer is empty and 
waits for the entire transmission to complete before clearing the corresponding flag.*/
void UART_SendString(const char *str)
{
	while (*str != '\0')
 280:	80 81       	ld	r24, Z
 282:	81 11       	cpse	r24, r1
 284:	f6 cf       	rjmp	.-20     	; 0x272 <UART_SendString+0x4>
		while (!(USART0.STATUS & USART_DREIF_bm)); //wait until Tx buffer is empty
		
		USART0.TXDATAL = *str;
		str++;
	}
	while (!(USART0.STATUS & USART_TXCIF_bm)); //wait until Tx finished
 286:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 28a:	86 ff       	sbrs	r24, 6
 28c:	fc cf       	rjmp	.-8      	; 0x286 <UART_SendString+0x18>
	
	USART0.STATUS |= USART_TXCIF_bm;
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f8 e0       	ldi	r31, 0x08	; 8
 292:	84 81       	ldd	r24, Z+4	; 0x04
 294:	80 64       	ori	r24, 0x40	; 64
 296:	84 83       	std	Z+4, r24	; 0x04
 298:	08 95       	ret

0000029a <__vector_22>:
It stores the received byte in RXBuffer at the current rx_index.
The code checks if the byte is a newline (0x0A) or if the buffer is full. If either is true, the rx_index is reset to 0 
to prepare for the next message. Otherwise, the rx_index is incremented to store the next byte in the buffer.
The commented DataRDY = true; line is used to indicate when a complete message has been received.*/
ISR(USART0_RXC_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	RXBuffer[rx_index] = USART0.RXDATAL;
 2ac:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <__data_end>
 2b0:	e8 2f       	mov	r30, r24
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
 2b8:	e7 5f       	subi	r30, 0xF7	; 247
 2ba:	f0 4c       	sbci	r31, 0xC0	; 192
 2bc:	90 83       	st	Z, r25
	
	if((RXBuffer[rx_index] == 0x0A) || (rx_index == 20)) {
 2be:	9a 30       	cpi	r25, 0x0A	; 10
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <__vector_22+0x2c>
 2c2:	84 31       	cpi	r24, 0x14	; 20
 2c4:	49 f4       	brne	.+18     	; 0x2d8 <__vector_22+0x3e>
		UART_drdy = true;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	80 93 06 3f 	sts	0x3F06, r24	; 0x803f06 <UART_drdy>
 2ce:	90 93 07 3f 	sts	0x3F07, r25	; 0x803f07 <sensor_drdy>
		rx_index = 0;
 2d2:	10 92 04 3f 	sts	0x3F04, r1	; 0x803f04 <__data_end>
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <__vector_22+0x44>
		} else {
		rx_index++;
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 04 3f 	sts	0x3F04, r24	; 0x803f04 <__data_end>
	}
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <data_process>:

uint8_t data_process(int *lower_threshold, int *upper_threshold){
 2f0:	cf 92       	push	r12
 2f2:	df 92       	push	r13
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	7c 01       	movw	r14, r24
 302:	6b 01       	movw	r12, r22
	char *maxPtr = NULL, *minPtr = NULL;

	// Find the positions of "MAX:" and "MIN:"
	maxPtr = strstr(RXBuffer, "MAX:");
 304:	6c e7       	ldi	r22, 0x7C	; 124
 306:	7a e8       	ldi	r23, 0x8A	; 138
 308:	89 e0       	ldi	r24, 0x09	; 9
 30a:	9f e3       	ldi	r25, 0x3F	; 63
 30c:	c1 d0       	rcall	.+386    	; 0x490 <strstr>
 30e:	8c 01       	movw	r16, r24
	minPtr = strstr(RXBuffer, "MIN:");
 310:	61 e8       	ldi	r22, 0x81	; 129
 312:	7a e8       	ldi	r23, 0x8A	; 138
 314:	89 e0       	ldi	r24, 0x09	; 9
 316:	9f e3       	ldi	r25, 0x3F	; 63
 318:	bb d0       	rcall	.+374    	; 0x490 <strstr>
 31a:	ec 01       	movw	r28, r24

	// If MAX is found, extract the number after "MAX:"
	if (maxPtr != NULL) {
 31c:	01 15       	cp	r16, r1
 31e:	11 05       	cpc	r17, r1
 320:	31 f0       	breq	.+12     	; 0x32e <data_process+0x3e>
		maxPtr += 4;  // Move the pointer past "MAX:"
		*upper_threshold = atoi(maxPtr);  // Convert the number to an integer
 322:	c8 01       	movw	r24, r16
 324:	04 96       	adiw	r24, 0x04	; 4
 326:	96 d0       	rcall	.+300    	; 0x454 <atoi>
 328:	f6 01       	movw	r30, r12
 32a:	80 83       	st	Z, r24
 32c:	91 83       	std	Z+1, r25	; 0x01
	}

	// If MIN is found, extract the number after "MIN:"
	if (minPtr != NULL) {
 32e:	20 97       	sbiw	r28, 0x00	; 0
 330:	31 f0       	breq	.+12     	; 0x33e <data_process+0x4e>
		minPtr += 4;  // Move the pointer past "MIN:"
		*lower_threshold = atoi(minPtr);  // Convert the number to an integer
 332:	ce 01       	movw	r24, r28
 334:	04 96       	adiw	r24, 0x04	; 4
 336:	8e d0       	rcall	.+284    	; 0x454 <atoi>
 338:	f7 01       	movw	r30, r14
 33a:	80 83       	st	Z, r24
 33c:	91 83       	std	Z+1, r25	; 0x01
	}
	UART_drdy = false;
 33e:	10 92 06 3f 	sts	0x3F06, r1	; 0x803f06 <UART_drdy>
 342:	10 92 07 3f 	sts	0x3F07, r1	; 0x803f07 <sensor_drdy>
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	08 95       	ret

00000358 <__vector_6>:

int low_threshold = 20;
int upper_threshold = 40;

ISR(RTC_CNT_vect)
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	8f 93       	push	r24
	/* Insert your RTC Overflow interrupt handling code */
	sensor_drdy = true;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 07 3f 	sts	0x3F07, r24	; 0x803f07 <sensor_drdy>
	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
 36a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7f8143>
}
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <main>:

int main(void)
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	a8 97       	sbiw	r28, 0x28	; 40
 384:	cd bf       	out	0x3d, r28	; 61
 386:	de bf       	out	0x3e, r29	; 62
	/* Configure modules, Initialize all needed functions */
	CLKCTRL_init();
 388:	33 df       	rcall	.-410    	; 0x1f0 <CLKCTRL_init>
	RTC_init();
 38a:	42 df       	rcall	.-380    	; 0x210 <RTC_init>
	ADC0_init();
 38c:	0e df       	rcall	.-484    	; 0x1aa <ADC0_init>
	GPIO_init();
 38e:	4b df       	rcall	.-362    	; 0x226 <GPIO_init>
	UART_init();
 390:	5e df       	rcall	.-324    	; 0x24e <UART_init>
	
	countTime = 0;	//Seconds counter
 392:	10 92 08 3f 	sts	0x3F08, r1	; 0x803f08 <countTime>
	char CommCon[40];	//String buffer
	
	memset(CommCon,0,40);	//Cleans the buffer by adding zeros to each position
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	28 e2       	ldi	r18, 0x28	; 40
 39c:	fc 01       	movw	r30, r24
 39e:	11 92       	st	Z+, r1
 3a0:	2a 95       	dec	r18
 3a2:	e9 f7       	brne	.-6      	; 0x39e <main+0x24>
	sprintf(CommCon, "HisBand Pro 1.0\r\n");
 3a4:	22 e1       	ldi	r18, 0x12	; 18
 3a6:	e6 e8       	ldi	r30, 0x86	; 134
 3a8:	fa e8       	ldi	r31, 0x8A	; 138
 3aa:	dc 01       	movw	r26, r24
 3ac:	01 90       	ld	r0, Z+
 3ae:	0d 92       	st	X+, r0
 3b0:	2a 95       	dec	r18
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x32>
	UART_SendString(CommCon);
 3b4:	5c df       	rcall	.-328    	; 0x26e <UART_SendString>
	
	/* Enable global interrupt */
	sei();
 3b6:	78 94       	sei
	
	/* Start a conversion */
	ADC0_start();
 3b8:	17 df       	rcall	.-466    	; 0x1e8 <ADC0_start>
	
	/* Replace with your application code */
	while (1)
	{
		if (UART_drdy)
 3ba:	80 91 06 3f 	lds	r24, 0x3F06	; 0x803f06 <UART_drdy>
 3be:	88 23       	and	r24, r24
 3c0:	e1 f3       	breq	.-8      	; 0x3ba <main+0x40>
		{
			//Get the new values for low and upper threshold
			data_process(&low_threshold, &upper_threshold);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	7f e3       	ldi	r23, 0x3F	; 63
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	9f e3       	ldi	r25, 0x3F	; 63
 3ca:	92 df       	rcall	.-220    	; 0x2f0 <data_process>
			if (sample > upper_threshold && !relay_state)
 3cc:	80 91 1d 3f 	lds	r24, 0x3F1D	; 0x803f1d <sample>
 3d0:	90 91 1e 3f 	lds	r25, 0x3F1E	; 0x803f1e <sample+0x1>
 3d4:	20 91 00 3f 	lds	r18, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 3d8:	30 91 01 3f 	lds	r19, 0x3F01	; 0x803f01 <__DATA_REGION_ORIGIN__+0x1>
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
 3e0:	38 f5       	brcc	.+78     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3e2:	20 91 05 3f 	lds	r18, 0x3F05	; 0x803f05 <relay_state>
 3e6:	21 11       	cpse	r18, r1
 3e8:	23 c0       	rjmp	.+70     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			{
				//Activate the relay
				GPIO_relay(true);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	22 df       	rcall	.-444    	; 0x232 <GPIO_relay>
				relay_state = true;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 05 3f 	sts	0x3F05, r24	; 0x803f05 <relay_state>
				
				//Send activation message
				memset(CommCon, 0, 40);
 3f4:	8e 01       	movw	r16, r28
 3f6:	0f 5f       	subi	r16, 0xFF	; 255
 3f8:	1f 4f       	sbci	r17, 0xFF	; 255
 3fa:	88 e2       	ldi	r24, 0x28	; 40
 3fc:	f8 01       	movw	r30, r16
 3fe:	11 92       	st	Z+, r1
 400:	8a 95       	dec	r24
 402:	e9 f7       	brne	.-6      	; 0x3fe <main+0x84>
				sprintf(CommCon, "Relay Turned ON-Temperature: %d\r\n",sample);
 404:	80 91 1e 3f 	lds	r24, 0x3F1E	; 0x803f1e <sample+0x1>
 408:	8f 93       	push	r24
 40a:	80 91 1d 3f 	lds	r24, 0x3F1D	; 0x803f1d <sample>
 40e:	8f 93       	push	r24
 410:	88 e9       	ldi	r24, 0x98	; 152
 412:	9a e8       	ldi	r25, 0x8A	; 138
 414:	9f 93       	push	r25
 416:	8f 93       	push	r24
 418:	1f 93       	push	r17
 41a:	0f 93       	push	r16
 41c:	5b d0       	rcall	.+182    	; 0x4d4 <sprintf>
				UART_SendString(CommCon);
 41e:	c8 01       	movw	r24, r16
 420:	26 df       	rcall	.-436    	; 0x26e <UART_SendString>
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	c5 cf       	rjmp	.-118    	; 0x3ba <main+0x40>

			} 
			else if (sample < low_threshold && relay_state)
 430:	20 91 02 3f 	lds	r18, 0x3F02	; 0x803f02 <low_threshold>
 434:	30 91 03 3f 	lds	r19, 0x3F03	; 0x803f03 <low_threshold+0x1>
 438:	82 17       	cp	r24, r18
 43a:	93 07       	cpc	r25, r19
 43c:	08 f0       	brcs	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	bd cf       	rjmp	.-134    	; 0x3ba <main+0x40>
 440:	80 91 05 3f 	lds	r24, 0x3F05	; 0x803f05 <relay_state>
 444:	88 23       	and	r24, r24
 446:	09 f4       	brne	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	b8 cf       	rjmp	.-144    	; 0x3ba <main+0x40>
			{
				//Deactivate the relay
				GPIO_relay(false);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	f2 de       	rcall	.-540    	; 0x232 <GPIO_relay>
				relay_state = false;
 44e:	10 92 05 3f 	sts	0x3F05, r1	; 0x803f05 <relay_state>
 452:	b3 cf       	rjmp	.-154    	; 0x3ba <main+0x40>

00000454 <atoi>:
 454:	fc 01       	movw	r30, r24
 456:	88 27       	eor	r24, r24
 458:	99 27       	eor	r25, r25
 45a:	e8 94       	clt
 45c:	21 91       	ld	r18, Z+
 45e:	20 32       	cpi	r18, 0x20	; 32
 460:	e9 f3       	breq	.-6      	; 0x45c <atoi+0x8>
 462:	29 30       	cpi	r18, 0x09	; 9
 464:	10 f0       	brcs	.+4      	; 0x46a <atoi+0x16>
 466:	2e 30       	cpi	r18, 0x0E	; 14
 468:	c8 f3       	brcs	.-14     	; 0x45c <atoi+0x8>
 46a:	2b 32       	cpi	r18, 0x2B	; 43
 46c:	41 f0       	breq	.+16     	; 0x47e <atoi+0x2a>
 46e:	2d 32       	cpi	r18, 0x2D	; 45
 470:	39 f4       	brne	.+14     	; 0x480 <atoi+0x2c>
 472:	68 94       	set
 474:	04 c0       	rjmp	.+8      	; 0x47e <atoi+0x2a>
 476:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__mulhi_const_10>
 47a:	82 0f       	add	r24, r18
 47c:	91 1d       	adc	r25, r1
 47e:	21 91       	ld	r18, Z+
 480:	20 53       	subi	r18, 0x30	; 48
 482:	2a 30       	cpi	r18, 0x0A	; 10
 484:	c0 f3       	brcs	.-16     	; 0x476 <atoi+0x22>
 486:	1e f4       	brtc	.+6      	; 0x48e <atoi+0x3a>
 488:	90 95       	com	r25
 48a:	81 95       	neg	r24
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	08 95       	ret

00000490 <strstr>:
 490:	fb 01       	movw	r30, r22
 492:	51 91       	ld	r21, Z+
 494:	55 23       	and	r21, r21
 496:	a9 f0       	breq	.+42     	; 0x4c2 <strstr+0x32>
 498:	bf 01       	movw	r22, r30
 49a:	dc 01       	movw	r26, r24
 49c:	4d 91       	ld	r20, X+
 49e:	45 17       	cp	r20, r21
 4a0:	41 11       	cpse	r20, r1
 4a2:	e1 f7       	brne	.-8      	; 0x49c <strstr+0xc>
 4a4:	59 f4       	brne	.+22     	; 0x4bc <strstr+0x2c>
 4a6:	cd 01       	movw	r24, r26
 4a8:	01 90       	ld	r0, Z+
 4aa:	00 20       	and	r0, r0
 4ac:	49 f0       	breq	.+18     	; 0x4c0 <strstr+0x30>
 4ae:	4d 91       	ld	r20, X+
 4b0:	40 15       	cp	r20, r0
 4b2:	41 11       	cpse	r20, r1
 4b4:	c9 f3       	breq	.-14     	; 0x4a8 <strstr+0x18>
 4b6:	fb 01       	movw	r30, r22
 4b8:	41 11       	cpse	r20, r1
 4ba:	ef cf       	rjmp	.-34     	; 0x49a <strstr+0xa>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	08 95       	ret

000004c4 <__mulhi_const_10>:
 4c4:	7a e0       	ldi	r23, 0x0A	; 10
 4c6:	97 9f       	mul	r25, r23
 4c8:	90 2d       	mov	r25, r0
 4ca:	87 9f       	mul	r24, r23
 4cc:	80 2d       	mov	r24, r0
 4ce:	91 0d       	add	r25, r1
 4d0:	11 24       	eor	r1, r1
 4d2:	08 95       	ret

000004d4 <sprintf>:
 4d4:	ae e0       	ldi	r26, 0x0E	; 14
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	ef e6       	ldi	r30, 0x6F	; 111
 4da:	f2 e0       	ldi	r31, 0x02	; 2
 4dc:	aa c2       	rjmp	.+1364   	; 0xa32 <__prologue_saves__+0x1c>
 4de:	0d 89       	ldd	r16, Y+21	; 0x15
 4e0:	1e 89       	ldd	r17, Y+22	; 0x16
 4e2:	86 e0       	ldi	r24, 0x06	; 6
 4e4:	8c 83       	std	Y+4, r24	; 0x04
 4e6:	09 83       	std	Y+1, r16	; 0x01
 4e8:	1a 83       	std	Y+2, r17	; 0x02
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	9f e7       	ldi	r25, 0x7F	; 127
 4ee:	8d 83       	std	Y+5, r24	; 0x05
 4f0:	9e 83       	std	Y+6, r25	; 0x06
 4f2:	ae 01       	movw	r20, r28
 4f4:	47 5e       	subi	r20, 0xE7	; 231
 4f6:	5f 4f       	sbci	r21, 0xFF	; 255
 4f8:	6f 89       	ldd	r22, Y+23	; 0x17
 4fa:	78 8d       	ldd	r23, Y+24	; 0x18
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	08 d0       	rcall	.+16     	; 0x512 <vfprintf>
 502:	ef 81       	ldd	r30, Y+7	; 0x07
 504:	f8 85       	ldd	r31, Y+8	; 0x08
 506:	e0 0f       	add	r30, r16
 508:	f1 1f       	adc	r31, r17
 50a:	10 82       	st	Z, r1
 50c:	2e 96       	adiw	r28, 0x0e	; 14
 50e:	e4 e0       	ldi	r30, 0x04	; 4
 510:	a9 c2       	rjmp	.+1362   	; 0xa64 <__epilogue_restores__+0x1c>

00000512 <vfprintf>:
 512:	ab e0       	ldi	r26, 0x0B	; 11
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	ee e8       	ldi	r30, 0x8E	; 142
 518:	f2 e0       	ldi	r31, 0x02	; 2
 51a:	7d c2       	rjmp	.+1274   	; 0xa16 <__prologue_saves__>
 51c:	6c 01       	movw	r12, r24
 51e:	7b 01       	movw	r14, r22
 520:	8a 01       	movw	r16, r20
 522:	fc 01       	movw	r30, r24
 524:	16 82       	std	Z+6, r1	; 0x06
 526:	17 82       	std	Z+7, r1	; 0x07
 528:	83 81       	ldd	r24, Z+3	; 0x03
 52a:	81 ff       	sbrs	r24, 1
 52c:	bf c1       	rjmp	.+894    	; 0x8ac <vfprintf+0x39a>
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	3c 01       	movw	r6, r24
 534:	f6 01       	movw	r30, r12
 536:	93 81       	ldd	r25, Z+3	; 0x03
 538:	f7 01       	movw	r30, r14
 53a:	93 fd       	sbrc	r25, 3
 53c:	85 91       	lpm	r24, Z+
 53e:	93 ff       	sbrs	r25, 3
 540:	81 91       	ld	r24, Z+
 542:	7f 01       	movw	r14, r30
 544:	88 23       	and	r24, r24
 546:	09 f4       	brne	.+2      	; 0x54a <vfprintf+0x38>
 548:	ad c1       	rjmp	.+858    	; 0x8a4 <vfprintf+0x392>
 54a:	85 32       	cpi	r24, 0x25	; 37
 54c:	39 f4       	brne	.+14     	; 0x55c <vfprintf+0x4a>
 54e:	93 fd       	sbrc	r25, 3
 550:	85 91       	lpm	r24, Z+
 552:	93 ff       	sbrs	r25, 3
 554:	81 91       	ld	r24, Z+
 556:	7f 01       	movw	r14, r30
 558:	85 32       	cpi	r24, 0x25	; 37
 55a:	21 f4       	brne	.+8      	; 0x564 <vfprintf+0x52>
 55c:	b6 01       	movw	r22, r12
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	c0 d1       	rcall	.+896    	; 0x8e2 <fputc>
 562:	e8 cf       	rjmp	.-48     	; 0x534 <vfprintf+0x22>
 564:	91 2c       	mov	r9, r1
 566:	21 2c       	mov	r2, r1
 568:	31 2c       	mov	r3, r1
 56a:	ff e1       	ldi	r31, 0x1F	; 31
 56c:	f3 15       	cp	r31, r3
 56e:	d8 f0       	brcs	.+54     	; 0x5a6 <vfprintf+0x94>
 570:	8b 32       	cpi	r24, 0x2B	; 43
 572:	79 f0       	breq	.+30     	; 0x592 <vfprintf+0x80>
 574:	38 f4       	brcc	.+14     	; 0x584 <vfprintf+0x72>
 576:	80 32       	cpi	r24, 0x20	; 32
 578:	79 f0       	breq	.+30     	; 0x598 <vfprintf+0x86>
 57a:	83 32       	cpi	r24, 0x23	; 35
 57c:	a1 f4       	brne	.+40     	; 0x5a6 <vfprintf+0x94>
 57e:	23 2d       	mov	r18, r3
 580:	20 61       	ori	r18, 0x10	; 16
 582:	1d c0       	rjmp	.+58     	; 0x5be <vfprintf+0xac>
 584:	8d 32       	cpi	r24, 0x2D	; 45
 586:	61 f0       	breq	.+24     	; 0x5a0 <vfprintf+0x8e>
 588:	80 33       	cpi	r24, 0x30	; 48
 58a:	69 f4       	brne	.+26     	; 0x5a6 <vfprintf+0x94>
 58c:	23 2d       	mov	r18, r3
 58e:	21 60       	ori	r18, 0x01	; 1
 590:	16 c0       	rjmp	.+44     	; 0x5be <vfprintf+0xac>
 592:	83 2d       	mov	r24, r3
 594:	82 60       	ori	r24, 0x02	; 2
 596:	38 2e       	mov	r3, r24
 598:	e3 2d       	mov	r30, r3
 59a:	e4 60       	ori	r30, 0x04	; 4
 59c:	3e 2e       	mov	r3, r30
 59e:	2a c0       	rjmp	.+84     	; 0x5f4 <vfprintf+0xe2>
 5a0:	f3 2d       	mov	r31, r3
 5a2:	f8 60       	ori	r31, 0x08	; 8
 5a4:	1d c0       	rjmp	.+58     	; 0x5e0 <vfprintf+0xce>
 5a6:	37 fc       	sbrc	r3, 7
 5a8:	2d c0       	rjmp	.+90     	; 0x604 <vfprintf+0xf2>
 5aa:	20 ed       	ldi	r18, 0xD0	; 208
 5ac:	28 0f       	add	r18, r24
 5ae:	2a 30       	cpi	r18, 0x0A	; 10
 5b0:	40 f0       	brcs	.+16     	; 0x5c2 <vfprintf+0xb0>
 5b2:	8e 32       	cpi	r24, 0x2E	; 46
 5b4:	b9 f4       	brne	.+46     	; 0x5e4 <vfprintf+0xd2>
 5b6:	36 fc       	sbrc	r3, 6
 5b8:	75 c1       	rjmp	.+746    	; 0x8a4 <vfprintf+0x392>
 5ba:	23 2d       	mov	r18, r3
 5bc:	20 64       	ori	r18, 0x40	; 64
 5be:	32 2e       	mov	r3, r18
 5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <vfprintf+0xe2>
 5c2:	36 fe       	sbrs	r3, 6
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <vfprintf+0xc0>
 5c6:	8a e0       	ldi	r24, 0x0A	; 10
 5c8:	98 9e       	mul	r9, r24
 5ca:	20 0d       	add	r18, r0
 5cc:	11 24       	eor	r1, r1
 5ce:	92 2e       	mov	r9, r18
 5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <vfprintf+0xe2>
 5d2:	ea e0       	ldi	r30, 0x0A	; 10
 5d4:	2e 9e       	mul	r2, r30
 5d6:	20 0d       	add	r18, r0
 5d8:	11 24       	eor	r1, r1
 5da:	22 2e       	mov	r2, r18
 5dc:	f3 2d       	mov	r31, r3
 5de:	f0 62       	ori	r31, 0x20	; 32
 5e0:	3f 2e       	mov	r3, r31
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <vfprintf+0xe2>
 5e4:	8c 36       	cpi	r24, 0x6C	; 108
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <vfprintf+0xde>
 5e8:	83 2d       	mov	r24, r3
 5ea:	80 68       	ori	r24, 0x80	; 128
 5ec:	38 2e       	mov	r3, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <vfprintf+0xe2>
 5f0:	88 36       	cpi	r24, 0x68	; 104
 5f2:	41 f4       	brne	.+16     	; 0x604 <vfprintf+0xf2>
 5f4:	f7 01       	movw	r30, r14
 5f6:	93 fd       	sbrc	r25, 3
 5f8:	85 91       	lpm	r24, Z+
 5fa:	93 ff       	sbrs	r25, 3
 5fc:	81 91       	ld	r24, Z+
 5fe:	7f 01       	movw	r14, r30
 600:	81 11       	cpse	r24, r1
 602:	b3 cf       	rjmp	.-154    	; 0x56a <vfprintf+0x58>
 604:	98 2f       	mov	r25, r24
 606:	9f 7d       	andi	r25, 0xDF	; 223
 608:	95 54       	subi	r25, 0x45	; 69
 60a:	93 30       	cpi	r25, 0x03	; 3
 60c:	28 f4       	brcc	.+10     	; 0x618 <vfprintf+0x106>
 60e:	0c 5f       	subi	r16, 0xFC	; 252
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	9f e3       	ldi	r25, 0x3F	; 63
 614:	99 83       	std	Y+1, r25	; 0x01
 616:	0d c0       	rjmp	.+26     	; 0x632 <vfprintf+0x120>
 618:	83 36       	cpi	r24, 0x63	; 99
 61a:	31 f0       	breq	.+12     	; 0x628 <vfprintf+0x116>
 61c:	83 37       	cpi	r24, 0x73	; 115
 61e:	71 f0       	breq	.+28     	; 0x63c <vfprintf+0x12a>
 620:	83 35       	cpi	r24, 0x53	; 83
 622:	09 f0       	breq	.+2      	; 0x626 <vfprintf+0x114>
 624:	55 c0       	rjmp	.+170    	; 0x6d0 <vfprintf+0x1be>
 626:	20 c0       	rjmp	.+64     	; 0x668 <vfprintf+0x156>
 628:	f8 01       	movw	r30, r16
 62a:	80 81       	ld	r24, Z
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	0e 5f       	subi	r16, 0xFE	; 254
 630:	1f 4f       	sbci	r17, 0xFF	; 255
 632:	88 24       	eor	r8, r8
 634:	83 94       	inc	r8
 636:	91 2c       	mov	r9, r1
 638:	53 01       	movw	r10, r6
 63a:	12 c0       	rjmp	.+36     	; 0x660 <vfprintf+0x14e>
 63c:	28 01       	movw	r4, r16
 63e:	f2 e0       	ldi	r31, 0x02	; 2
 640:	4f 0e       	add	r4, r31
 642:	51 1c       	adc	r5, r1
 644:	f8 01       	movw	r30, r16
 646:	a0 80       	ld	r10, Z
 648:	b1 80       	ldd	r11, Z+1	; 0x01
 64a:	36 fe       	sbrs	r3, 6
 64c:	03 c0       	rjmp	.+6      	; 0x654 <vfprintf+0x142>
 64e:	69 2d       	mov	r22, r9
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <vfprintf+0x146>
 654:	6f ef       	ldi	r22, 0xFF	; 255
 656:	7f ef       	ldi	r23, 0xFF	; 255
 658:	c5 01       	movw	r24, r10
 65a:	38 d1       	rcall	.+624    	; 0x8cc <strnlen>
 65c:	4c 01       	movw	r8, r24
 65e:	82 01       	movw	r16, r4
 660:	f3 2d       	mov	r31, r3
 662:	ff 77       	andi	r31, 0x7F	; 127
 664:	3f 2e       	mov	r3, r31
 666:	15 c0       	rjmp	.+42     	; 0x692 <vfprintf+0x180>
 668:	28 01       	movw	r4, r16
 66a:	22 e0       	ldi	r18, 0x02	; 2
 66c:	42 0e       	add	r4, r18
 66e:	51 1c       	adc	r5, r1
 670:	f8 01       	movw	r30, r16
 672:	a0 80       	ld	r10, Z
 674:	b1 80       	ldd	r11, Z+1	; 0x01
 676:	36 fe       	sbrs	r3, 6
 678:	03 c0       	rjmp	.+6      	; 0x680 <vfprintf+0x16e>
 67a:	69 2d       	mov	r22, r9
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <vfprintf+0x172>
 680:	6f ef       	ldi	r22, 0xFF	; 255
 682:	7f ef       	ldi	r23, 0xFF	; 255
 684:	c5 01       	movw	r24, r10
 686:	17 d1       	rcall	.+558    	; 0x8b6 <strnlen_P>
 688:	4c 01       	movw	r8, r24
 68a:	f3 2d       	mov	r31, r3
 68c:	f0 68       	ori	r31, 0x80	; 128
 68e:	3f 2e       	mov	r3, r31
 690:	82 01       	movw	r16, r4
 692:	33 fc       	sbrc	r3, 3
 694:	19 c0       	rjmp	.+50     	; 0x6c8 <vfprintf+0x1b6>
 696:	82 2d       	mov	r24, r2
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	88 16       	cp	r8, r24
 69c:	99 06       	cpc	r9, r25
 69e:	a0 f4       	brcc	.+40     	; 0x6c8 <vfprintf+0x1b6>
 6a0:	b6 01       	movw	r22, r12
 6a2:	80 e2       	ldi	r24, 0x20	; 32
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	1d d1       	rcall	.+570    	; 0x8e2 <fputc>
 6a8:	2a 94       	dec	r2
 6aa:	f5 cf       	rjmp	.-22     	; 0x696 <vfprintf+0x184>
 6ac:	f5 01       	movw	r30, r10
 6ae:	37 fc       	sbrc	r3, 7
 6b0:	85 91       	lpm	r24, Z+
 6b2:	37 fe       	sbrs	r3, 7
 6b4:	81 91       	ld	r24, Z+
 6b6:	5f 01       	movw	r10, r30
 6b8:	b6 01       	movw	r22, r12
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	12 d1       	rcall	.+548    	; 0x8e2 <fputc>
 6be:	21 10       	cpse	r2, r1
 6c0:	2a 94       	dec	r2
 6c2:	21 e0       	ldi	r18, 0x01	; 1
 6c4:	82 1a       	sub	r8, r18
 6c6:	91 08       	sbc	r9, r1
 6c8:	81 14       	cp	r8, r1
 6ca:	91 04       	cpc	r9, r1
 6cc:	79 f7       	brne	.-34     	; 0x6ac <vfprintf+0x19a>
 6ce:	e1 c0       	rjmp	.+450    	; 0x892 <vfprintf+0x380>
 6d0:	84 36       	cpi	r24, 0x64	; 100
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <vfprintf+0x1c6>
 6d4:	89 36       	cpi	r24, 0x69	; 105
 6d6:	39 f5       	brne	.+78     	; 0x726 <vfprintf+0x214>
 6d8:	f8 01       	movw	r30, r16
 6da:	37 fe       	sbrs	r3, 7
 6dc:	07 c0       	rjmp	.+14     	; 0x6ec <vfprintf+0x1da>
 6de:	60 81       	ld	r22, Z
 6e0:	71 81       	ldd	r23, Z+1	; 0x01
 6e2:	82 81       	ldd	r24, Z+2	; 0x02
 6e4:	93 81       	ldd	r25, Z+3	; 0x03
 6e6:	0c 5f       	subi	r16, 0xFC	; 252
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <vfprintf+0x1ea>
 6ec:	60 81       	ld	r22, Z
 6ee:	71 81       	ldd	r23, Z+1	; 0x01
 6f0:	07 2e       	mov	r0, r23
 6f2:	00 0c       	add	r0, r0
 6f4:	88 0b       	sbc	r24, r24
 6f6:	99 0b       	sbc	r25, r25
 6f8:	0e 5f       	subi	r16, 0xFE	; 254
 6fa:	1f 4f       	sbci	r17, 0xFF	; 255
 6fc:	f3 2d       	mov	r31, r3
 6fe:	ff 76       	andi	r31, 0x6F	; 111
 700:	3f 2e       	mov	r3, r31
 702:	97 ff       	sbrs	r25, 7
 704:	09 c0       	rjmp	.+18     	; 0x718 <vfprintf+0x206>
 706:	90 95       	com	r25
 708:	80 95       	com	r24
 70a:	70 95       	com	r23
 70c:	61 95       	neg	r22
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	f0 68       	ori	r31, 0x80	; 128
 716:	3f 2e       	mov	r3, r31
 718:	2a e0       	ldi	r18, 0x0A	; 10
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	a3 01       	movw	r20, r6
 71e:	1d d1       	rcall	.+570    	; 0x95a <__ultoa_invert>
 720:	88 2e       	mov	r8, r24
 722:	86 18       	sub	r8, r6
 724:	44 c0       	rjmp	.+136    	; 0x7ae <vfprintf+0x29c>
 726:	85 37       	cpi	r24, 0x75	; 117
 728:	31 f4       	brne	.+12     	; 0x736 <vfprintf+0x224>
 72a:	23 2d       	mov	r18, r3
 72c:	2f 7e       	andi	r18, 0xEF	; 239
 72e:	b2 2e       	mov	r11, r18
 730:	2a e0       	ldi	r18, 0x0A	; 10
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	25 c0       	rjmp	.+74     	; 0x780 <vfprintf+0x26e>
 736:	93 2d       	mov	r25, r3
 738:	99 7f       	andi	r25, 0xF9	; 249
 73a:	b9 2e       	mov	r11, r25
 73c:	8f 36       	cpi	r24, 0x6F	; 111
 73e:	c1 f0       	breq	.+48     	; 0x770 <vfprintf+0x25e>
 740:	18 f4       	brcc	.+6      	; 0x748 <vfprintf+0x236>
 742:	88 35       	cpi	r24, 0x58	; 88
 744:	79 f0       	breq	.+30     	; 0x764 <vfprintf+0x252>
 746:	ae c0       	rjmp	.+348    	; 0x8a4 <vfprintf+0x392>
 748:	80 37       	cpi	r24, 0x70	; 112
 74a:	19 f0       	breq	.+6      	; 0x752 <vfprintf+0x240>
 74c:	88 37       	cpi	r24, 0x78	; 120
 74e:	21 f0       	breq	.+8      	; 0x758 <vfprintf+0x246>
 750:	a9 c0       	rjmp	.+338    	; 0x8a4 <vfprintf+0x392>
 752:	e9 2f       	mov	r30, r25
 754:	e0 61       	ori	r30, 0x10	; 16
 756:	be 2e       	mov	r11, r30
 758:	b4 fe       	sbrs	r11, 4
 75a:	0d c0       	rjmp	.+26     	; 0x776 <vfprintf+0x264>
 75c:	fb 2d       	mov	r31, r11
 75e:	f4 60       	ori	r31, 0x04	; 4
 760:	bf 2e       	mov	r11, r31
 762:	09 c0       	rjmp	.+18     	; 0x776 <vfprintf+0x264>
 764:	34 fe       	sbrs	r3, 4
 766:	0a c0       	rjmp	.+20     	; 0x77c <vfprintf+0x26a>
 768:	29 2f       	mov	r18, r25
 76a:	26 60       	ori	r18, 0x06	; 6
 76c:	b2 2e       	mov	r11, r18
 76e:	06 c0       	rjmp	.+12     	; 0x77c <vfprintf+0x26a>
 770:	28 e0       	ldi	r18, 0x08	; 8
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	05 c0       	rjmp	.+10     	; 0x780 <vfprintf+0x26e>
 776:	20 e1       	ldi	r18, 0x10	; 16
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <vfprintf+0x26e>
 77c:	20 e1       	ldi	r18, 0x10	; 16
 77e:	32 e0       	ldi	r19, 0x02	; 2
 780:	f8 01       	movw	r30, r16
 782:	b7 fe       	sbrs	r11, 7
 784:	07 c0       	rjmp	.+14     	; 0x794 <vfprintf+0x282>
 786:	60 81       	ld	r22, Z
 788:	71 81       	ldd	r23, Z+1	; 0x01
 78a:	82 81       	ldd	r24, Z+2	; 0x02
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	0c 5f       	subi	r16, 0xFC	; 252
 790:	1f 4f       	sbci	r17, 0xFF	; 255
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <vfprintf+0x28e>
 794:	60 81       	ld	r22, Z
 796:	71 81       	ldd	r23, Z+1	; 0x01
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 5f       	subi	r16, 0xFE	; 254
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	a3 01       	movw	r20, r6
 7a2:	db d0       	rcall	.+438    	; 0x95a <__ultoa_invert>
 7a4:	88 2e       	mov	r8, r24
 7a6:	86 18       	sub	r8, r6
 7a8:	fb 2d       	mov	r31, r11
 7aa:	ff 77       	andi	r31, 0x7F	; 127
 7ac:	3f 2e       	mov	r3, r31
 7ae:	36 fe       	sbrs	r3, 6
 7b0:	0d c0       	rjmp	.+26     	; 0x7cc <vfprintf+0x2ba>
 7b2:	23 2d       	mov	r18, r3
 7b4:	2e 7f       	andi	r18, 0xFE	; 254
 7b6:	a2 2e       	mov	r10, r18
 7b8:	89 14       	cp	r8, r9
 7ba:	58 f4       	brcc	.+22     	; 0x7d2 <vfprintf+0x2c0>
 7bc:	34 fe       	sbrs	r3, 4
 7be:	0b c0       	rjmp	.+22     	; 0x7d6 <vfprintf+0x2c4>
 7c0:	32 fc       	sbrc	r3, 2
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <vfprintf+0x2c4>
 7c4:	83 2d       	mov	r24, r3
 7c6:	8e 7e       	andi	r24, 0xEE	; 238
 7c8:	a8 2e       	mov	r10, r24
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <vfprintf+0x2c4>
 7cc:	b8 2c       	mov	r11, r8
 7ce:	a3 2c       	mov	r10, r3
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <vfprintf+0x2c6>
 7d2:	b8 2c       	mov	r11, r8
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <vfprintf+0x2c6>
 7d6:	b9 2c       	mov	r11, r9
 7d8:	a4 fe       	sbrs	r10, 4
 7da:	0f c0       	rjmp	.+30     	; 0x7fa <vfprintf+0x2e8>
 7dc:	fe 01       	movw	r30, r28
 7de:	e8 0d       	add	r30, r8
 7e0:	f1 1d       	adc	r31, r1
 7e2:	80 81       	ld	r24, Z
 7e4:	80 33       	cpi	r24, 0x30	; 48
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <vfprintf+0x2de>
 7e8:	9a 2d       	mov	r25, r10
 7ea:	99 7e       	andi	r25, 0xE9	; 233
 7ec:	a9 2e       	mov	r10, r25
 7ee:	09 c0       	rjmp	.+18     	; 0x802 <vfprintf+0x2f0>
 7f0:	a2 fe       	sbrs	r10, 2
 7f2:	06 c0       	rjmp	.+12     	; 0x800 <vfprintf+0x2ee>
 7f4:	b3 94       	inc	r11
 7f6:	b3 94       	inc	r11
 7f8:	04 c0       	rjmp	.+8      	; 0x802 <vfprintf+0x2f0>
 7fa:	8a 2d       	mov	r24, r10
 7fc:	86 78       	andi	r24, 0x86	; 134
 7fe:	09 f0       	breq	.+2      	; 0x802 <vfprintf+0x2f0>
 800:	b3 94       	inc	r11
 802:	a3 fc       	sbrc	r10, 3
 804:	10 c0       	rjmp	.+32     	; 0x826 <vfprintf+0x314>
 806:	a0 fe       	sbrs	r10, 0
 808:	06 c0       	rjmp	.+12     	; 0x816 <vfprintf+0x304>
 80a:	b2 14       	cp	r11, r2
 80c:	80 f4       	brcc	.+32     	; 0x82e <vfprintf+0x31c>
 80e:	28 0c       	add	r2, r8
 810:	92 2c       	mov	r9, r2
 812:	9b 18       	sub	r9, r11
 814:	0d c0       	rjmp	.+26     	; 0x830 <vfprintf+0x31e>
 816:	b2 14       	cp	r11, r2
 818:	58 f4       	brcc	.+22     	; 0x830 <vfprintf+0x31e>
 81a:	b6 01       	movw	r22, r12
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	60 d0       	rcall	.+192    	; 0x8e2 <fputc>
 822:	b3 94       	inc	r11
 824:	f8 cf       	rjmp	.-16     	; 0x816 <vfprintf+0x304>
 826:	b2 14       	cp	r11, r2
 828:	18 f4       	brcc	.+6      	; 0x830 <vfprintf+0x31e>
 82a:	2b 18       	sub	r2, r11
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x320>
 82e:	98 2c       	mov	r9, r8
 830:	21 2c       	mov	r2, r1
 832:	a4 fe       	sbrs	r10, 4
 834:	0f c0       	rjmp	.+30     	; 0x854 <vfprintf+0x342>
 836:	b6 01       	movw	r22, r12
 838:	80 e3       	ldi	r24, 0x30	; 48
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	52 d0       	rcall	.+164    	; 0x8e2 <fputc>
 83e:	a2 fe       	sbrs	r10, 2
 840:	16 c0       	rjmp	.+44     	; 0x86e <vfprintf+0x35c>
 842:	a1 fc       	sbrc	r10, 1
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x33a>
 846:	88 e7       	ldi	r24, 0x78	; 120
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x33e>
 84c:	88 e5       	ldi	r24, 0x58	; 88
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	b6 01       	movw	r22, r12
 852:	0c c0       	rjmp	.+24     	; 0x86c <vfprintf+0x35a>
 854:	8a 2d       	mov	r24, r10
 856:	86 78       	andi	r24, 0x86	; 134
 858:	51 f0       	breq	.+20     	; 0x86e <vfprintf+0x35c>
 85a:	a1 fe       	sbrs	r10, 1
 85c:	02 c0       	rjmp	.+4      	; 0x862 <vfprintf+0x350>
 85e:	8b e2       	ldi	r24, 0x2B	; 43
 860:	01 c0       	rjmp	.+2      	; 0x864 <vfprintf+0x352>
 862:	80 e2       	ldi	r24, 0x20	; 32
 864:	a7 fc       	sbrc	r10, 7
 866:	8d e2       	ldi	r24, 0x2D	; 45
 868:	b6 01       	movw	r22, r12
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	3a d0       	rcall	.+116    	; 0x8e2 <fputc>
 86e:	89 14       	cp	r8, r9
 870:	30 f4       	brcc	.+12     	; 0x87e <vfprintf+0x36c>
 872:	b6 01       	movw	r22, r12
 874:	80 e3       	ldi	r24, 0x30	; 48
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	34 d0       	rcall	.+104    	; 0x8e2 <fputc>
 87a:	9a 94       	dec	r9
 87c:	f8 cf       	rjmp	.-16     	; 0x86e <vfprintf+0x35c>
 87e:	8a 94       	dec	r8
 880:	f3 01       	movw	r30, r6
 882:	e8 0d       	add	r30, r8
 884:	f1 1d       	adc	r31, r1
 886:	80 81       	ld	r24, Z
 888:	b6 01       	movw	r22, r12
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	2a d0       	rcall	.+84     	; 0x8e2 <fputc>
 88e:	81 10       	cpse	r8, r1
 890:	f6 cf       	rjmp	.-20     	; 0x87e <vfprintf+0x36c>
 892:	22 20       	and	r2, r2
 894:	09 f4       	brne	.+2      	; 0x898 <vfprintf+0x386>
 896:	4e ce       	rjmp	.-868    	; 0x534 <vfprintf+0x22>
 898:	b6 01       	movw	r22, r12
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	21 d0       	rcall	.+66     	; 0x8e2 <fputc>
 8a0:	2a 94       	dec	r2
 8a2:	f7 cf       	rjmp	.-18     	; 0x892 <vfprintf+0x380>
 8a4:	f6 01       	movw	r30, r12
 8a6:	86 81       	ldd	r24, Z+6	; 0x06
 8a8:	97 81       	ldd	r25, Z+7	; 0x07
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <vfprintf+0x39e>
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	9f ef       	ldi	r25, 0xFF	; 255
 8b0:	2b 96       	adiw	r28, 0x0b	; 11
 8b2:	e2 e1       	ldi	r30, 0x12	; 18
 8b4:	c9 c0       	rjmp	.+402    	; 0xa48 <__epilogue_restores__>

000008b6 <strnlen_P>:
 8b6:	fc 01       	movw	r30, r24
 8b8:	05 90       	lpm	r0, Z+
 8ba:	61 50       	subi	r22, 0x01	; 1
 8bc:	70 40       	sbci	r23, 0x00	; 0
 8be:	01 10       	cpse	r0, r1
 8c0:	d8 f7       	brcc	.-10     	; 0x8b8 <strnlen_P+0x2>
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	8e 0f       	add	r24, r30
 8c8:	9f 1f       	adc	r25, r31
 8ca:	08 95       	ret

000008cc <strnlen>:
 8cc:	fc 01       	movw	r30, r24
 8ce:	61 50       	subi	r22, 0x01	; 1
 8d0:	70 40       	sbci	r23, 0x00	; 0
 8d2:	01 90       	ld	r0, Z+
 8d4:	01 10       	cpse	r0, r1
 8d6:	d8 f7       	brcc	.-10     	; 0x8ce <strnlen+0x2>
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	8e 0f       	add	r24, r30
 8de:	9f 1f       	adc	r25, r31
 8e0:	08 95       	ret

000008e2 <fputc>:
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	fb 01       	movw	r30, r22
 8ec:	23 81       	ldd	r18, Z+3	; 0x03
 8ee:	21 fd       	sbrc	r18, 1
 8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <fputc+0x16>
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	9f ef       	ldi	r25, 0xFF	; 255
 8f6:	2c c0       	rjmp	.+88     	; 0x950 <fputc+0x6e>
 8f8:	22 ff       	sbrs	r18, 2
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <fputc+0x46>
 8fc:	46 81       	ldd	r20, Z+6	; 0x06
 8fe:	57 81       	ldd	r21, Z+7	; 0x07
 900:	24 81       	ldd	r18, Z+4	; 0x04
 902:	35 81       	ldd	r19, Z+5	; 0x05
 904:	42 17       	cp	r20, r18
 906:	53 07       	cpc	r21, r19
 908:	44 f4       	brge	.+16     	; 0x91a <fputc+0x38>
 90a:	a0 81       	ld	r26, Z
 90c:	b1 81       	ldd	r27, Z+1	; 0x01
 90e:	9d 01       	movw	r18, r26
 910:	2f 5f       	subi	r18, 0xFF	; 255
 912:	3f 4f       	sbci	r19, 0xFF	; 255
 914:	20 83       	st	Z, r18
 916:	31 83       	std	Z+1, r19	; 0x01
 918:	8c 93       	st	X, r24
 91a:	26 81       	ldd	r18, Z+6	; 0x06
 91c:	37 81       	ldd	r19, Z+7	; 0x07
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	26 83       	std	Z+6, r18	; 0x06
 924:	37 83       	std	Z+7, r19	; 0x07
 926:	14 c0       	rjmp	.+40     	; 0x950 <fputc+0x6e>
 928:	8b 01       	movw	r16, r22
 92a:	ec 01       	movw	r28, r24
 92c:	fb 01       	movw	r30, r22
 92e:	00 84       	ldd	r0, Z+8	; 0x08
 930:	f1 85       	ldd	r31, Z+9	; 0x09
 932:	e0 2d       	mov	r30, r0
 934:	09 95       	icall
 936:	89 2b       	or	r24, r25
 938:	e1 f6       	brne	.-72     	; 0x8f2 <fputc+0x10>
 93a:	d8 01       	movw	r26, r16
 93c:	16 96       	adiw	r26, 0x06	; 6
 93e:	8d 91       	ld	r24, X+
 940:	9c 91       	ld	r25, X
 942:	17 97       	sbiw	r26, 0x07	; 7
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	16 96       	adiw	r26, 0x06	; 6
 948:	8d 93       	st	X+, r24
 94a:	9c 93       	st	X, r25
 94c:	17 97       	sbiw	r26, 0x07	; 7
 94e:	ce 01       	movw	r24, r28
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	1f 91       	pop	r17
 956:	0f 91       	pop	r16
 958:	08 95       	ret

0000095a <__ultoa_invert>:
 95a:	fa 01       	movw	r30, r20
 95c:	aa 27       	eor	r26, r26
 95e:	28 30       	cpi	r18, 0x08	; 8
 960:	51 f1       	breq	.+84     	; 0x9b6 <__ultoa_invert+0x5c>
 962:	20 31       	cpi	r18, 0x10	; 16
 964:	81 f1       	breq	.+96     	; 0x9c6 <__ultoa_invert+0x6c>
 966:	e8 94       	clt
 968:	6f 93       	push	r22
 96a:	6e 7f       	andi	r22, 0xFE	; 254
 96c:	6e 5f       	subi	r22, 0xFE	; 254
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	8f 4f       	sbci	r24, 0xFF	; 255
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	af 4f       	sbci	r26, 0xFF	; 255
 976:	b1 e0       	ldi	r27, 0x01	; 1
 978:	3e d0       	rcall	.+124    	; 0x9f6 <__ultoa_invert+0x9c>
 97a:	b4 e0       	ldi	r27, 0x04	; 4
 97c:	3c d0       	rcall	.+120    	; 0x9f6 <__ultoa_invert+0x9c>
 97e:	67 0f       	add	r22, r23
 980:	78 1f       	adc	r23, r24
 982:	89 1f       	adc	r24, r25
 984:	9a 1f       	adc	r25, r26
 986:	a1 1d       	adc	r26, r1
 988:	68 0f       	add	r22, r24
 98a:	79 1f       	adc	r23, r25
 98c:	8a 1f       	adc	r24, r26
 98e:	91 1d       	adc	r25, r1
 990:	a1 1d       	adc	r26, r1
 992:	6a 0f       	add	r22, r26
 994:	71 1d       	adc	r23, r1
 996:	81 1d       	adc	r24, r1
 998:	91 1d       	adc	r25, r1
 99a:	a1 1d       	adc	r26, r1
 99c:	20 d0       	rcall	.+64     	; 0x9de <__ultoa_invert+0x84>
 99e:	09 f4       	brne	.+2      	; 0x9a2 <__ultoa_invert+0x48>
 9a0:	68 94       	set
 9a2:	3f 91       	pop	r19
 9a4:	2a e0       	ldi	r18, 0x0A	; 10
 9a6:	26 9f       	mul	r18, r22
 9a8:	11 24       	eor	r1, r1
 9aa:	30 19       	sub	r19, r0
 9ac:	30 5d       	subi	r19, 0xD0	; 208
 9ae:	31 93       	st	Z+, r19
 9b0:	de f6       	brtc	.-74     	; 0x968 <__ultoa_invert+0xe>
 9b2:	cf 01       	movw	r24, r30
 9b4:	08 95       	ret
 9b6:	46 2f       	mov	r20, r22
 9b8:	47 70       	andi	r20, 0x07	; 7
 9ba:	40 5d       	subi	r20, 0xD0	; 208
 9bc:	41 93       	st	Z+, r20
 9be:	b3 e0       	ldi	r27, 0x03	; 3
 9c0:	0f d0       	rcall	.+30     	; 0x9e0 <__ultoa_invert+0x86>
 9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__ultoa_invert+0x5c>
 9c4:	f6 cf       	rjmp	.-20     	; 0x9b2 <__ultoa_invert+0x58>
 9c6:	46 2f       	mov	r20, r22
 9c8:	4f 70       	andi	r20, 0x0F	; 15
 9ca:	40 5d       	subi	r20, 0xD0	; 208
 9cc:	4a 33       	cpi	r20, 0x3A	; 58
 9ce:	18 f0       	brcs	.+6      	; 0x9d6 <__ultoa_invert+0x7c>
 9d0:	49 5d       	subi	r20, 0xD9	; 217
 9d2:	31 fd       	sbrc	r19, 1
 9d4:	40 52       	subi	r20, 0x20	; 32
 9d6:	41 93       	st	Z+, r20
 9d8:	02 d0       	rcall	.+4      	; 0x9de <__ultoa_invert+0x84>
 9da:	a9 f7       	brne	.-22     	; 0x9c6 <__ultoa_invert+0x6c>
 9dc:	ea cf       	rjmp	.-44     	; 0x9b2 <__ultoa_invert+0x58>
 9de:	b4 e0       	ldi	r27, 0x04	; 4
 9e0:	a6 95       	lsr	r26
 9e2:	97 95       	ror	r25
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	ba 95       	dec	r27
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__ultoa_invert+0x86>
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	61 05       	cpc	r22, r1
 9f2:	71 05       	cpc	r23, r1
 9f4:	08 95       	ret
 9f6:	9b 01       	movw	r18, r22
 9f8:	ac 01       	movw	r20, r24
 9fa:	0a 2e       	mov	r0, r26
 9fc:	06 94       	lsr	r0
 9fe:	57 95       	ror	r21
 a00:	47 95       	ror	r20
 a02:	37 95       	ror	r19
 a04:	27 95       	ror	r18
 a06:	ba 95       	dec	r27
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__ultoa_invert+0xa2>
 a0a:	62 0f       	add	r22, r18
 a0c:	73 1f       	adc	r23, r19
 a0e:	84 1f       	adc	r24, r20
 a10:	95 1f       	adc	r25, r21
 a12:	a0 1d       	adc	r26, r0
 a14:	08 95       	ret

00000a16 <__prologue_saves__>:
 a16:	2f 92       	push	r2
 a18:	3f 92       	push	r3
 a1a:	4f 92       	push	r4
 a1c:	5f 92       	push	r5
 a1e:	6f 92       	push	r6
 a20:	7f 92       	push	r7
 a22:	8f 92       	push	r8
 a24:	9f 92       	push	r9
 a26:	af 92       	push	r10
 a28:	bf 92       	push	r11
 a2a:	cf 92       	push	r12
 a2c:	df 92       	push	r13
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	ca 1b       	sub	r28, r26
 a40:	db 0b       	sbc	r29, r27
 a42:	cd bf       	out	0x3d, r28	; 61
 a44:	de bf       	out	0x3e, r29	; 62
 a46:	09 94       	ijmp

00000a48 <__epilogue_restores__>:
 a48:	2a 88       	ldd	r2, Y+18	; 0x12
 a4a:	39 88       	ldd	r3, Y+17	; 0x11
 a4c:	48 88       	ldd	r4, Y+16	; 0x10
 a4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a50:	6e 84       	ldd	r6, Y+14	; 0x0e
 a52:	7d 84       	ldd	r7, Y+13	; 0x0d
 a54:	8c 84       	ldd	r8, Y+12	; 0x0c
 a56:	9b 84       	ldd	r9, Y+11	; 0x0b
 a58:	aa 84       	ldd	r10, Y+10	; 0x0a
 a5a:	b9 84       	ldd	r11, Y+9	; 0x09
 a5c:	c8 84       	ldd	r12, Y+8	; 0x08
 a5e:	df 80       	ldd	r13, Y+7	; 0x07
 a60:	ee 80       	ldd	r14, Y+6	; 0x06
 a62:	fd 80       	ldd	r15, Y+5	; 0x05
 a64:	0c 81       	ldd	r16, Y+4	; 0x04
 a66:	1b 81       	ldd	r17, Y+3	; 0x03
 a68:	aa 81       	ldd	r26, Y+2	; 0x02
 a6a:	b9 81       	ldd	r27, Y+1	; 0x01
 a6c:	ce 0f       	add	r28, r30
 a6e:	d1 1d       	adc	r29, r1
 a70:	cd bf       	out	0x3d, r28	; 61
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	ed 01       	movw	r28, r26
 a76:	08 95       	ret

00000a78 <_exit>:
 a78:	f8 94       	cli

00000a7a <__stop_program>:
 a7a:	ff cf       	rjmp	.-2      	; 0xa7a <__stop_program>
