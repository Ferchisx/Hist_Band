
Hist_Band.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  000008e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  00008828  00000828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000019  00803f00  00803f00  000008e0  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e1c  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cd7  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000885  00000000  00000000  00005543  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000188  00000000  00000000  00005dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000015cb  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001b8  00000000  00000000  0000751b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  000076d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	d2 c0       	rjmp	.+420    	; 0x1b2 <__vector_6>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	19 c0       	rjmp	.+50     	; 0x56 <__vector_17>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	9d c0       	rjmp	.+314    	; 0x168 <__vector_22>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 31       	cpi	r26, 0x19	; 25
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	c1 d0       	rcall	.+386    	; 0x1d4 <main>
  52:	e8 c3       	rjmp	.+2000   	; 0x824 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_17>:
Clears the Interrupt Flag: The interruption can't be triggered repeatedly until a new condition occurs
Reads the ADC Result: The ADC0 conversion data is stored in the global variable "sample"
Starts a New Conversion: The ISR triggers a new ADC conversion, ensuring that the ADC is 
continuously sampling new data and the process is ongoing.*/
ISR(ADC0_RESRDY_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	2f 93       	push	r18
  62:	3f 93       	push	r19
  64:	8f 93       	push	r24
  66:	ef 93       	push	r30
  68:	ff 93       	push	r31
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
  6a:	e0 e0       	ldi	r30, 0x00	; 0
  6c:	f6 e0       	ldi	r31, 0x06	; 6
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	83 87       	std	Z+11, r24	; 0x0b
	
	sample = ADC0.RES;
  72:	20 89       	ldd	r18, Z+16	; 0x10
  74:	31 89       	ldd	r19, Z+17	; 0x11
  76:	20 93 17 3f 	sts	0x3F17, r18	; 0x803f17 <sample>
  7a:	30 93 18 3f 	sts	0x3F18, r19	; 0x803f18 <sample+0x1>
	
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
  7e:	80 87       	std	Z+8, r24	; 0x08
}
  80:	ff 91       	pop	r31
  82:	ef 91       	pop	r30
  84:	8f 91       	pop	r24
  86:	3f 91       	pop	r19
  88:	2f 91       	pop	r18
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <ADC0_init>:
/*This initialization ensures that the ADC is ready to perform accurate 
conversions and trigger interrupts when new conversion results are available.*/
void ADC0_init(void)
{
	/* Disable digital input buffer */
	PORTA.PIN4CTRL &= ~PORT_ISC_gm;
  94:	e0 e0       	ldi	r30, 0x00	; 0
  96:	f4 e0       	ldi	r31, 0x04	; 4
  98:	84 89       	ldd	r24, Z+20	; 0x14
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
  9e:	84 89       	ldd	r24, Z+20	; 0x14
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	84 8b       	std	Z+20, r24	; 0x14
	
	/* Disable pull-up resistor */
	PORTA.PIN4CTRL &= ~PORT_PULLUPEN_bm;
  a4:	84 89       	ldd	r24, Z+20	; 0x14
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	84 8b       	std	Z+20, r24	; 0x14
	
	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	/* Voltage reference  2.5V */
  aa:	e0 ea       	ldi	r30, 0xA0	; 160
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 83       	st	Z, r24
	VREF.CTRLB |= VREF_ADC0REFEN_bm;		/* Force Voltage reference */
  b4:	81 81       	ldd	r24, Z+1	; 0x01
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	81 83       	std	Z+1, r24	; 0x01
	
	ADC0.CTRLC = ADC_PRESC_DIV8_gc |		/* CLK_PER divided by 8 */
  ba:	e0 e0       	ldi	r30, 0x00	; 0
  bc:	f6 e0       	ldi	r31, 0x06	; 6
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	82 83       	std	Z+2, r24	; 0x02
	ADC_REFSEL_INTREF_gc;					/* Internal reference */
	
	ADC0.CTRLA |= ADC_ENABLE_bm |			/* ADC Enable: enabled */
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
	ADC_RESSEL_10BIT_gc;					/* 10-bit mode */
	
	/* Enable ADC interrupt */
	ADC0.INTCTRL = ADC_RESRDY_bm;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	82 87       	std	Z+10, r24	; 0x0a
	
	/* Select ADC channel */
	ADC0.MUXPOS = ADC_MUXPOS_AIN4_gc;
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	86 83       	std	Z+6, r24	; 0x06
  d0:	08 95       	ret

000000d2 <ADC0_start>:
After starting the conversion, the ADC will sample the input signal, convert it to a digital value, and set an interrupt flag 
(if configured) when the conversion is complete, allowing the program to read the result.*/
void ADC0_start(void)
{
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  d8:	08 95       	ret

000000da <CLKCTRL_init>:
It sets the clock prescaler to divide the system clock by 8 and enables the prescaler.
It configures the 20 MHz internal oscillator as the clock source and disables clock output to external pins.
It waits until the clock system has stabilized and the changes are applied. */
void CLKCTRL_init(void)
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_16X_gc | CLKCTRL_PEN_bm);
  da:	88 ed       	ldi	r24, 0xD8	; 216
  dc:	27 e0       	ldi	r18, 0x07	; 7
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	84 bf       	out	0x34, r24	; 52
  e2:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, !CLKCTRL_CLKOUT_bm | CLKCTRL_CLKSEL_OSC20M_gc);
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	84 bf       	out	0x34, r24	; 52
  ec:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	while (!(CLKCTRL.MCLKSTATUS));
  f0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
  f4:	88 23       	and	r24, r24
  f6:	e1 f3       	breq	.-8      	; 0xf0 <CLKCTRL_init+0x16>
}
  f8:	08 95       	ret

000000fa <RTC_init>:
It sets the period value to 0x44 (68 decimal), meaning the RTC will generate an overflow event after counting to this value.
It enables the overflow interrupt, so that an interrupt is triggered when the RTC overflows,
while disabling the compare match interrupt. */
void RTC_init(void)
{
	RTC.CTRLA = RTC_PRESCALER_DIV512_gc /* 512 */
  fa:	e0 e4       	ldi	r30, 0x40	; 64
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	89 e4       	ldi	r24, 0x49	; 73
 100:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp     /* Enable: enabled */
	| 0 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	RTC.PER = 0x44; /* Period: 0xd */
 102:	84 e4       	ldi	r24, 0x44	; 68
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	82 87       	std	Z+10, r24	; 0x0a
 108:	93 87       	std	Z+11, r25	; 0x0b

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	08 95       	ret

00000110 <GPIO_init>:
#include "gpio.h"

/*This function looks for the direction of PORTA and configures its pin 2 as an output pin*/
void GPIO_init(void)
{
	PORTA.DIR |= PIN2_bm;
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	f4 e0       	ldi	r31, 0x04	; 4
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <UART_init>:
/*This function initializes the UART with the necessary parameters like baud rate, and activating both
Receiver and Transmitter so it can get and send data though the same UART*/
void UART_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
 11c:	e0 e0       	ldi	r30, 0x00	; 0
 11e:	f8 e0       	ldi	r31, 0x08	; 8
 120:	81 ea       	ldi	r24, 0xA1	; 161
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	80 87       	std	Z+8, r24	; 0x08
 126:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = USART_RXCIE_bm;  /* Receive Complete Interrupt Enable: enabled */
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	85 83       	std	Z+5, r24	; 0x05
	
	USART0.CTRLB = USART_RXEN_bm |    /* Receiver Enable: enabled */
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	86 83       	std	Z+6, r24	; 0x06
	USART_TXEN_bm;    /* Transmitter Enable: enabled */
	
	/* Set TxD (PB2) as output */
	PORTB.DIR |= PIN2_bm;
 130:	e0 e2       	ldi	r30, 0x20	; 32
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	80 81       	ld	r24, Z
 136:	84 60       	ori	r24, 0x04	; 4
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <UART_SendString>:

/*This function takes a string and sends each character over UART until it reaches the end of the string (null terminator).
It ensures that each byte is sent only when the transmit buffer is empty and 
waits for the entire transmission to complete before clearing the corresponding flag.*/
void UART_SendString(const char *str)
{
 13c:	fc 01       	movw	r30, r24
	while (*str != '\0')
 13e:	07 c0       	rjmp	.+14     	; 0x14e <UART_SendString+0x12>
	{
		while (!(USART0.STATUS & USART_DREIF_bm)); //wait until Tx buffer is empty
 140:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 144:	95 ff       	sbrs	r25, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <UART_SendString+0x4>
		
		USART0.TXDATAL = *str;
 148:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
		str++;
 14c:	31 96       	adiw	r30, 0x01	; 1
/*This function takes a string and sends each character over UART until it reaches the end of the string (null terminator).
It ensures that each byte is sent only when the transmit buffer is empty and 
waits for the entire transmission to complete before clearing the corresponding flag.*/
void UART_SendString(const char *str)
{
	while (*str != '\0')
 14e:	80 81       	ld	r24, Z
 150:	81 11       	cpse	r24, r1
 152:	f6 cf       	rjmp	.-20     	; 0x140 <UART_SendString+0x4>
		while (!(USART0.STATUS & USART_DREIF_bm)); //wait until Tx buffer is empty
		
		USART0.TXDATAL = *str;
		str++;
	}
	while (!(USART0.STATUS & USART_TXCIF_bm)); //wait until Tx finished
 154:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 158:	86 ff       	sbrs	r24, 6
 15a:	fc cf       	rjmp	.-8      	; 0x154 <UART_SendString+0x18>
	
	USART0.STATUS |= USART_TXCIF_bm;
 15c:	e0 e0       	ldi	r30, 0x00	; 0
 15e:	f8 e0       	ldi	r31, 0x08	; 8
 160:	84 81       	ldd	r24, Z+4	; 0x04
 162:	80 64       	ori	r24, 0x40	; 64
 164:	84 83       	std	Z+4, r24	; 0x04
 166:	08 95       	ret

00000168 <__vector_22>:
It stores the received byte in RXBuffer at the current rx_index.
The code checks if the byte is a newline (0x0A) or if the buffer is full. If either is true, the rx_index is reset to 0 
to prepare for the next message. Otherwise, the rx_index is incremented to store the next byte in the buffer.
The commented DataRDY = true; line is used to signal when a complete message has been received.*/
ISR(USART0_RXC_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	RXBuffer[rx_index] = USART0.RXDATAL;
 17a:	80 91 00 3f 	lds	r24, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
 186:	ed 5f       	subi	r30, 0xFD	; 253
 188:	f0 4c       	sbci	r31, 0xC0	; 192
 18a:	90 83       	st	Z, r25
	
	if((RXBuffer[rx_index] == 0x0A) || (rx_index == 20)) {
 18c:	9a 30       	cpi	r25, 0x0A	; 10
 18e:	11 f0       	breq	.+4      	; 0x194 <__vector_22+0x2c>
 190:	84 31       	cpi	r24, 0x14	; 20
 192:	19 f4       	brne	.+6      	; 0x19a <__vector_22+0x32>
		//DataRDY = true;
		rx_index = 0;
 194:	10 92 00 3f 	sts	0x3F00, r1	; 0x803f00 <__DATA_REGION_ORIGIN__>
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <__vector_22+0x38>
		} else {
		rx_index++;
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 00 3f 	sts	0x3F00, r24	; 0x803f00 <__DATA_REGION_ORIGIN__>
	}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_6>:
uint8_t countTime;
uint16_t sample;
uint8_t RXBuffer[20];

ISR(RTC_CNT_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
	/* Insert your RTC Overflow interrupt handling code */
	drdy = true;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 01 3f 	sts	0x3F01, r24	; 0x803f01 <drdy>
	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
 1c4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7f8143>
}
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <main>:

int main(void)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	a8 97       	sbiw	r28, 0x28	; 40
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	de bf       	out	0x3e, r29	; 62
	/* Configure modules */
	CLKCTRL_init();
 1e2:	7b df       	rcall	.-266    	; 0xda <CLKCTRL_init>
	RTC_init();
 1e4:	8a df       	rcall	.-236    	; 0xfa <RTC_init>
	ADC0_init();
 1e6:	56 df       	rcall	.-340    	; 0x94 <ADC0_init>
	GPIO_init();
 1e8:	93 df       	rcall	.-218    	; 0x110 <GPIO_init>
	UART_init();
 1ea:	98 df       	rcall	.-208    	; 0x11c <UART_init>
	
	countTime = 0;
 1ec:	10 92 02 3f 	sts	0x3F02, r1	; 0x803f02 <countTime>
	char CommCon[40];
	
	memset(CommCon,0,40);
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	28 e2       	ldi	r18, 0x28	; 40
 1f6:	fc 01       	movw	r30, r24
 1f8:	11 92       	st	Z+, r1
 1fa:	2a 95       	dec	r18
 1fc:	e9 f7       	brne	.-6      	; 0x1f8 <main+0x24>
	sprintf(CommCon, "HisBand Pro 1.0\r\n");
 1fe:	22 e1       	ldi	r18, 0x12	; 18
 200:	e8 e2       	ldi	r30, 0x28	; 40
 202:	f8 e8       	ldi	r31, 0x88	; 136
 204:	dc 01       	movw	r26, r24
 206:	01 90       	ld	r0, Z+
 208:	0d 92       	st	X+, r0
 20a:	2a 95       	dec	r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x32>
	UART_SendString(CommCon);
 20e:	96 df       	rcall	.-212    	; 0x13c <UART_SendString>
	
	/* Enable global interrupt */
	sei();
 210:	78 94       	sei
	
	/* Start a conversion */
	ADC0_start();
 212:	5f df       	rcall	.-322    	; 0xd2 <ADC0_start>
	//GPIO_relay(false);
	
	/* Replace with your application code */
	while (1)
	{
		if(drdy)
 214:	80 91 01 3f 	lds	r24, 0x3F01	; 0x803f01 <drdy>
 218:	88 23       	and	r24, r24
 21a:	e1 f3       	breq	.-8      	; 0x214 <main+0x40>
		{
			if (countTime == 1) {
 21c:	80 91 02 3f 	lds	r24, 0x3F02	; 0x803f02 <countTime>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	19 f5       	brne	.+70     	; 0x26a <main+0x96>
				memset(CommCon,0,40);
 224:	8e 01       	movw	r16, r28
 226:	0f 5f       	subi	r16, 0xFF	; 255
 228:	1f 4f       	sbci	r17, 0xFF	; 255
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	f8 01       	movw	r30, r16
 22e:	11 92       	st	Z+, r1
 230:	8a 95       	dec	r24
 232:	e9 f7       	brne	.-6      	; 0x22e <main+0x5a>
				sprintf(CommCon,"Temperature: %d\r\n", sample);
 234:	80 91 18 3f 	lds	r24, 0x3F18	; 0x803f18 <sample+0x1>
 238:	8f 93       	push	r24
 23a:	80 91 17 3f 	lds	r24, 0x3F17	; 0x803f17 <sample>
 23e:	8f 93       	push	r24
 240:	8a e3       	ldi	r24, 0x3A	; 58
 242:	98 e8       	ldi	r25, 0x88	; 136
 244:	9f 93       	push	r25
 246:	8f 93       	push	r24
 248:	1f 93       	push	r17
 24a:	0f 93       	push	r16
 24c:	19 d0       	rcall	.+50     	; 0x280 <sprintf>
				UART_SendString(CommCon);
 24e:	c8 01       	movw	r24, r16
 250:	75 df       	rcall	.-278    	; 0x13c <UART_SendString>
				countTime++;
 252:	80 91 02 3f 	lds	r24, 0x3F02	; 0x803f02 <countTime>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <countTime>
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	08 c0       	rjmp	.+16     	; 0x27a <main+0xa6>
				} else if(countTime == 3) {
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	19 f4       	brne	.+6      	; 0x274 <main+0xa0>
				countTime = 0;
 26e:	10 92 02 3f 	sts	0x3F02, r1	; 0x803f02 <countTime>
 272:	03 c0       	rjmp	.+6      	; 0x27a <main+0xa6>
				} else {
				countTime++;
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <countTime>
			}
			
			drdy = false;
 27a:	10 92 01 3f 	sts	0x3F01, r1	; 0x803f01 <drdy>
 27e:	ca cf       	rjmp	.-108    	; 0x214 <main+0x40>

00000280 <sprintf>:
 280:	ae e0       	ldi	r26, 0x0E	; 14
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	e5 e4       	ldi	r30, 0x45	; 69
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	aa c2       	rjmp	.+1364   	; 0x7de <__prologue_saves__+0x1c>
 28a:	0d 89       	ldd	r16, Y+21	; 0x15
 28c:	1e 89       	ldd	r17, Y+22	; 0x16
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	8c 83       	std	Y+4, r24	; 0x04
 292:	09 83       	std	Y+1, r16	; 0x01
 294:	1a 83       	std	Y+2, r17	; 0x02
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	9f e7       	ldi	r25, 0x7F	; 127
 29a:	8d 83       	std	Y+5, r24	; 0x05
 29c:	9e 83       	std	Y+6, r25	; 0x06
 29e:	ae 01       	movw	r20, r28
 2a0:	47 5e       	subi	r20, 0xE7	; 231
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
 2a4:	6f 89       	ldd	r22, Y+23	; 0x17
 2a6:	78 8d       	ldd	r23, Y+24	; 0x18
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	08 d0       	rcall	.+16     	; 0x2be <vfprintf>
 2ae:	ef 81       	ldd	r30, Y+7	; 0x07
 2b0:	f8 85       	ldd	r31, Y+8	; 0x08
 2b2:	e0 0f       	add	r30, r16
 2b4:	f1 1f       	adc	r31, r17
 2b6:	10 82       	st	Z, r1
 2b8:	2e 96       	adiw	r28, 0x0e	; 14
 2ba:	e4 e0       	ldi	r30, 0x04	; 4
 2bc:	a9 c2       	rjmp	.+1362   	; 0x810 <__epilogue_restores__+0x1c>

000002be <vfprintf>:
 2be:	ab e0       	ldi	r26, 0x0B	; 11
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e4 e6       	ldi	r30, 0x64	; 100
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	7d c2       	rjmp	.+1274   	; 0x7c2 <__prologue_saves__>
 2c8:	6c 01       	movw	r12, r24
 2ca:	7b 01       	movw	r14, r22
 2cc:	8a 01       	movw	r16, r20
 2ce:	fc 01       	movw	r30, r24
 2d0:	16 82       	std	Z+6, r1	; 0x06
 2d2:	17 82       	std	Z+7, r1	; 0x07
 2d4:	83 81       	ldd	r24, Z+3	; 0x03
 2d6:	81 ff       	sbrs	r24, 1
 2d8:	bf c1       	rjmp	.+894    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 2da:	ce 01       	movw	r24, r28
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	3c 01       	movw	r6, r24
 2e0:	f6 01       	movw	r30, r12
 2e2:	93 81       	ldd	r25, Z+3	; 0x03
 2e4:	f7 01       	movw	r30, r14
 2e6:	93 fd       	sbrc	r25, 3
 2e8:	85 91       	lpm	r24, Z+
 2ea:	93 ff       	sbrs	r25, 3
 2ec:	81 91       	ld	r24, Z+
 2ee:	7f 01       	movw	r14, r30
 2f0:	88 23       	and	r24, r24
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <vfprintf+0x38>
 2f4:	ad c1       	rjmp	.+858    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 2f6:	85 32       	cpi	r24, 0x25	; 37
 2f8:	39 f4       	brne	.+14     	; 0x308 <vfprintf+0x4a>
 2fa:	93 fd       	sbrc	r25, 3
 2fc:	85 91       	lpm	r24, Z+
 2fe:	93 ff       	sbrs	r25, 3
 300:	81 91       	ld	r24, Z+
 302:	7f 01       	movw	r14, r30
 304:	85 32       	cpi	r24, 0x25	; 37
 306:	21 f4       	brne	.+8      	; 0x310 <vfprintf+0x52>
 308:	b6 01       	movw	r22, r12
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	c0 d1       	rcall	.+896    	; 0x68e <fputc>
 30e:	e8 cf       	rjmp	.-48     	; 0x2e0 <vfprintf+0x22>
 310:	91 2c       	mov	r9, r1
 312:	21 2c       	mov	r2, r1
 314:	31 2c       	mov	r3, r1
 316:	ff e1       	ldi	r31, 0x1F	; 31
 318:	f3 15       	cp	r31, r3
 31a:	d8 f0       	brcs	.+54     	; 0x352 <vfprintf+0x94>
 31c:	8b 32       	cpi	r24, 0x2B	; 43
 31e:	79 f0       	breq	.+30     	; 0x33e <vfprintf+0x80>
 320:	38 f4       	brcc	.+14     	; 0x330 <vfprintf+0x72>
 322:	80 32       	cpi	r24, 0x20	; 32
 324:	79 f0       	breq	.+30     	; 0x344 <vfprintf+0x86>
 326:	83 32       	cpi	r24, 0x23	; 35
 328:	a1 f4       	brne	.+40     	; 0x352 <vfprintf+0x94>
 32a:	23 2d       	mov	r18, r3
 32c:	20 61       	ori	r18, 0x10	; 16
 32e:	1d c0       	rjmp	.+58     	; 0x36a <vfprintf+0xac>
 330:	8d 32       	cpi	r24, 0x2D	; 45
 332:	61 f0       	breq	.+24     	; 0x34c <vfprintf+0x8e>
 334:	80 33       	cpi	r24, 0x30	; 48
 336:	69 f4       	brne	.+26     	; 0x352 <vfprintf+0x94>
 338:	23 2d       	mov	r18, r3
 33a:	21 60       	ori	r18, 0x01	; 1
 33c:	16 c0       	rjmp	.+44     	; 0x36a <vfprintf+0xac>
 33e:	83 2d       	mov	r24, r3
 340:	82 60       	ori	r24, 0x02	; 2
 342:	38 2e       	mov	r3, r24
 344:	e3 2d       	mov	r30, r3
 346:	e4 60       	ori	r30, 0x04	; 4
 348:	3e 2e       	mov	r3, r30
 34a:	2a c0       	rjmp	.+84     	; 0x3a0 <vfprintf+0xe2>
 34c:	f3 2d       	mov	r31, r3
 34e:	f8 60       	ori	r31, 0x08	; 8
 350:	1d c0       	rjmp	.+58     	; 0x38c <vfprintf+0xce>
 352:	37 fc       	sbrc	r3, 7
 354:	2d c0       	rjmp	.+90     	; 0x3b0 <vfprintf+0xf2>
 356:	20 ed       	ldi	r18, 0xD0	; 208
 358:	28 0f       	add	r18, r24
 35a:	2a 30       	cpi	r18, 0x0A	; 10
 35c:	40 f0       	brcs	.+16     	; 0x36e <vfprintf+0xb0>
 35e:	8e 32       	cpi	r24, 0x2E	; 46
 360:	b9 f4       	brne	.+46     	; 0x390 <vfprintf+0xd2>
 362:	36 fc       	sbrc	r3, 6
 364:	75 c1       	rjmp	.+746    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 366:	23 2d       	mov	r18, r3
 368:	20 64       	ori	r18, 0x40	; 64
 36a:	32 2e       	mov	r3, r18
 36c:	19 c0       	rjmp	.+50     	; 0x3a0 <vfprintf+0xe2>
 36e:	36 fe       	sbrs	r3, 6
 370:	06 c0       	rjmp	.+12     	; 0x37e <vfprintf+0xc0>
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	98 9e       	mul	r9, r24
 376:	20 0d       	add	r18, r0
 378:	11 24       	eor	r1, r1
 37a:	92 2e       	mov	r9, r18
 37c:	11 c0       	rjmp	.+34     	; 0x3a0 <vfprintf+0xe2>
 37e:	ea e0       	ldi	r30, 0x0A	; 10
 380:	2e 9e       	mul	r2, r30
 382:	20 0d       	add	r18, r0
 384:	11 24       	eor	r1, r1
 386:	22 2e       	mov	r2, r18
 388:	f3 2d       	mov	r31, r3
 38a:	f0 62       	ori	r31, 0x20	; 32
 38c:	3f 2e       	mov	r3, r31
 38e:	08 c0       	rjmp	.+16     	; 0x3a0 <vfprintf+0xe2>
 390:	8c 36       	cpi	r24, 0x6C	; 108
 392:	21 f4       	brne	.+8      	; 0x39c <vfprintf+0xde>
 394:	83 2d       	mov	r24, r3
 396:	80 68       	ori	r24, 0x80	; 128
 398:	38 2e       	mov	r3, r24
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <vfprintf+0xe2>
 39c:	88 36       	cpi	r24, 0x68	; 104
 39e:	41 f4       	brne	.+16     	; 0x3b0 <vfprintf+0xf2>
 3a0:	f7 01       	movw	r30, r14
 3a2:	93 fd       	sbrc	r25, 3
 3a4:	85 91       	lpm	r24, Z+
 3a6:	93 ff       	sbrs	r25, 3
 3a8:	81 91       	ld	r24, Z+
 3aa:	7f 01       	movw	r14, r30
 3ac:	81 11       	cpse	r24, r1
 3ae:	b3 cf       	rjmp	.-154    	; 0x316 <vfprintf+0x58>
 3b0:	98 2f       	mov	r25, r24
 3b2:	9f 7d       	andi	r25, 0xDF	; 223
 3b4:	95 54       	subi	r25, 0x45	; 69
 3b6:	93 30       	cpi	r25, 0x03	; 3
 3b8:	28 f4       	brcc	.+10     	; 0x3c4 <vfprintf+0x106>
 3ba:	0c 5f       	subi	r16, 0xFC	; 252
 3bc:	1f 4f       	sbci	r17, 0xFF	; 255
 3be:	9f e3       	ldi	r25, 0x3F	; 63
 3c0:	99 83       	std	Y+1, r25	; 0x01
 3c2:	0d c0       	rjmp	.+26     	; 0x3de <vfprintf+0x120>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	31 f0       	breq	.+12     	; 0x3d4 <vfprintf+0x116>
 3c8:	83 37       	cpi	r24, 0x73	; 115
 3ca:	71 f0       	breq	.+28     	; 0x3e8 <vfprintf+0x12a>
 3cc:	83 35       	cpi	r24, 0x53	; 83
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <vfprintf+0x114>
 3d0:	55 c0       	rjmp	.+170    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 3d2:	20 c0       	rjmp	.+64     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3d4:	f8 01       	movw	r30, r16
 3d6:	80 81       	ld	r24, Z
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	0e 5f       	subi	r16, 0xFE	; 254
 3dc:	1f 4f       	sbci	r17, 0xFF	; 255
 3de:	88 24       	eor	r8, r8
 3e0:	83 94       	inc	r8
 3e2:	91 2c       	mov	r9, r1
 3e4:	53 01       	movw	r10, r6
 3e6:	12 c0       	rjmp	.+36     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e8:	28 01       	movw	r4, r16
 3ea:	f2 e0       	ldi	r31, 0x02	; 2
 3ec:	4f 0e       	add	r4, r31
 3ee:	51 1c       	adc	r5, r1
 3f0:	f8 01       	movw	r30, r16
 3f2:	a0 80       	ld	r10, Z
 3f4:	b1 80       	ldd	r11, Z+1	; 0x01
 3f6:	36 fe       	sbrs	r3, 6
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fa:	69 2d       	mov	r22, r9
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	6f ef       	ldi	r22, 0xFF	; 255
 402:	7f ef       	ldi	r23, 0xFF	; 255
 404:	c5 01       	movw	r24, r10
 406:	38 d1       	rcall	.+624    	; 0x678 <strnlen>
 408:	4c 01       	movw	r8, r24
 40a:	82 01       	movw	r16, r4
 40c:	f3 2d       	mov	r31, r3
 40e:	ff 77       	andi	r31, 0x7F	; 127
 410:	3f 2e       	mov	r3, r31
 412:	15 c0       	rjmp	.+42     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 414:	28 01       	movw	r4, r16
 416:	22 e0       	ldi	r18, 0x02	; 2
 418:	42 0e       	add	r4, r18
 41a:	51 1c       	adc	r5, r1
 41c:	f8 01       	movw	r30, r16
 41e:	a0 80       	ld	r10, Z
 420:	b1 80       	ldd	r11, Z+1	; 0x01
 422:	36 fe       	sbrs	r3, 6
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 426:	69 2d       	mov	r22, r9
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	6f ef       	ldi	r22, 0xFF	; 255
 42e:	7f ef       	ldi	r23, 0xFF	; 255
 430:	c5 01       	movw	r24, r10
 432:	17 d1       	rcall	.+558    	; 0x662 <strnlen_P>
 434:	4c 01       	movw	r8, r24
 436:	f3 2d       	mov	r31, r3
 438:	f0 68       	ori	r31, 0x80	; 128
 43a:	3f 2e       	mov	r3, r31
 43c:	82 01       	movw	r16, r4
 43e:	33 fc       	sbrc	r3, 3
 440:	19 c0       	rjmp	.+50     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 442:	82 2d       	mov	r24, r2
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	88 16       	cp	r8, r24
 448:	99 06       	cpc	r9, r25
 44a:	a0 f4       	brcc	.+40     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 44c:	b6 01       	movw	r22, r12
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	1d d1       	rcall	.+570    	; 0x68e <fputc>
 454:	2a 94       	dec	r2
 456:	f5 cf       	rjmp	.-22     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 458:	f5 01       	movw	r30, r10
 45a:	37 fc       	sbrc	r3, 7
 45c:	85 91       	lpm	r24, Z+
 45e:	37 fe       	sbrs	r3, 7
 460:	81 91       	ld	r24, Z+
 462:	5f 01       	movw	r10, r30
 464:	b6 01       	movw	r22, r12
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	12 d1       	rcall	.+548    	; 0x68e <fputc>
 46a:	21 10       	cpse	r2, r1
 46c:	2a 94       	dec	r2
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	82 1a       	sub	r8, r18
 472:	91 08       	sbc	r9, r1
 474:	81 14       	cp	r8, r1
 476:	91 04       	cpc	r9, r1
 478:	79 f7       	brne	.-34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 47a:	e1 c0       	rjmp	.+450    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 47c:	84 36       	cpi	r24, 0x64	; 100
 47e:	11 f0       	breq	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 480:	89 36       	cpi	r24, 0x69	; 105
 482:	39 f5       	brne	.+78     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 484:	f8 01       	movw	r30, r16
 486:	37 fe       	sbrs	r3, 7
 488:	07 c0       	rjmp	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 48a:	60 81       	ld	r22, Z
 48c:	71 81       	ldd	r23, Z+1	; 0x01
 48e:	82 81       	ldd	r24, Z+2	; 0x02
 490:	93 81       	ldd	r25, Z+3	; 0x03
 492:	0c 5f       	subi	r16, 0xFC	; 252
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	08 c0       	rjmp	.+16     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 498:	60 81       	ld	r22, Z
 49a:	71 81       	ldd	r23, Z+1	; 0x01
 49c:	07 2e       	mov	r0, r23
 49e:	00 0c       	add	r0, r0
 4a0:	88 0b       	sbc	r24, r24
 4a2:	99 0b       	sbc	r25, r25
 4a4:	0e 5f       	subi	r16, 0xFE	; 254
 4a6:	1f 4f       	sbci	r17, 0xFF	; 255
 4a8:	f3 2d       	mov	r31, r3
 4aa:	ff 76       	andi	r31, 0x6F	; 111
 4ac:	3f 2e       	mov	r3, r31
 4ae:	97 ff       	sbrs	r25, 7
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b2:	90 95       	com	r25
 4b4:	80 95       	com	r24
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	f0 68       	ori	r31, 0x80	; 128
 4c2:	3f 2e       	mov	r3, r31
 4c4:	2a e0       	ldi	r18, 0x0A	; 10
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	a3 01       	movw	r20, r6
 4ca:	1d d1       	rcall	.+570    	; 0x706 <__ultoa_invert>
 4cc:	88 2e       	mov	r8, r24
 4ce:	86 18       	sub	r8, r6
 4d0:	44 c0       	rjmp	.+136    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 4d2:	85 37       	cpi	r24, 0x75	; 117
 4d4:	31 f4       	brne	.+12     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d6:	23 2d       	mov	r18, r3
 4d8:	2f 7e       	andi	r18, 0xEF	; 239
 4da:	b2 2e       	mov	r11, r18
 4dc:	2a e0       	ldi	r18, 0x0A	; 10
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	25 c0       	rjmp	.+74     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4e2:	93 2d       	mov	r25, r3
 4e4:	99 7f       	andi	r25, 0xF9	; 249
 4e6:	b9 2e       	mov	r11, r25
 4e8:	8f 36       	cpi	r24, 0x6F	; 111
 4ea:	c1 f0       	breq	.+48     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4ec:	18 f4       	brcc	.+6      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4ee:	88 35       	cpi	r24, 0x58	; 88
 4f0:	79 f0       	breq	.+30     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4f2:	ae c0       	rjmp	.+348    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4f4:	80 37       	cpi	r24, 0x70	; 112
 4f6:	19 f0       	breq	.+6      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4f8:	88 37       	cpi	r24, 0x78	; 120
 4fa:	21 f0       	breq	.+8      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4fc:	a9 c0       	rjmp	.+338    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 4fe:	e9 2f       	mov	r30, r25
 500:	e0 61       	ori	r30, 0x10	; 16
 502:	be 2e       	mov	r11, r30
 504:	b4 fe       	sbrs	r11, 4
 506:	0d c0       	rjmp	.+26     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 508:	fb 2d       	mov	r31, r11
 50a:	f4 60       	ori	r31, 0x04	; 4
 50c:	bf 2e       	mov	r11, r31
 50e:	09 c0       	rjmp	.+18     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 510:	34 fe       	sbrs	r3, 4
 512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 514:	29 2f       	mov	r18, r25
 516:	26 60       	ori	r18, 0x06	; 6
 518:	b2 2e       	mov	r11, r18
 51a:	06 c0       	rjmp	.+12     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 51c:	28 e0       	ldi	r18, 0x08	; 8
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	05 c0       	rjmp	.+10     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 522:	20 e1       	ldi	r18, 0x10	; 16
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 528:	20 e1       	ldi	r18, 0x10	; 16
 52a:	32 e0       	ldi	r19, 0x02	; 2
 52c:	f8 01       	movw	r30, r16
 52e:	b7 fe       	sbrs	r11, 7
 530:	07 c0       	rjmp	.+14     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 532:	60 81       	ld	r22, Z
 534:	71 81       	ldd	r23, Z+1	; 0x01
 536:	82 81       	ldd	r24, Z+2	; 0x02
 538:	93 81       	ldd	r25, Z+3	; 0x03
 53a:	0c 5f       	subi	r16, 0xFC	; 252
 53c:	1f 4f       	sbci	r17, 0xFF	; 255
 53e:	06 c0       	rjmp	.+12     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 540:	60 81       	ld	r22, Z
 542:	71 81       	ldd	r23, Z+1	; 0x01
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 5f       	subi	r16, 0xFE	; 254
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
 54c:	a3 01       	movw	r20, r6
 54e:	db d0       	rcall	.+438    	; 0x706 <__ultoa_invert>
 550:	88 2e       	mov	r8, r24
 552:	86 18       	sub	r8, r6
 554:	fb 2d       	mov	r31, r11
 556:	ff 77       	andi	r31, 0x7F	; 127
 558:	3f 2e       	mov	r3, r31
 55a:	36 fe       	sbrs	r3, 6
 55c:	0d c0       	rjmp	.+26     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 55e:	23 2d       	mov	r18, r3
 560:	2e 7f       	andi	r18, 0xFE	; 254
 562:	a2 2e       	mov	r10, r18
 564:	89 14       	cp	r8, r9
 566:	58 f4       	brcc	.+22     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 568:	34 fe       	sbrs	r3, 4
 56a:	0b c0       	rjmp	.+22     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 56c:	32 fc       	sbrc	r3, 2
 56e:	09 c0       	rjmp	.+18     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 570:	83 2d       	mov	r24, r3
 572:	8e 7e       	andi	r24, 0xEE	; 238
 574:	a8 2e       	mov	r10, r24
 576:	05 c0       	rjmp	.+10     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 578:	b8 2c       	mov	r11, r8
 57a:	a3 2c       	mov	r10, r3
 57c:	03 c0       	rjmp	.+6      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 57e:	b8 2c       	mov	r11, r8
 580:	01 c0       	rjmp	.+2      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 582:	b9 2c       	mov	r11, r9
 584:	a4 fe       	sbrs	r10, 4
 586:	0f c0       	rjmp	.+30     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 588:	fe 01       	movw	r30, r28
 58a:	e8 0d       	add	r30, r8
 58c:	f1 1d       	adc	r31, r1
 58e:	80 81       	ld	r24, Z
 590:	80 33       	cpi	r24, 0x30	; 48
 592:	21 f4       	brne	.+8      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 594:	9a 2d       	mov	r25, r10
 596:	99 7e       	andi	r25, 0xE9	; 233
 598:	a9 2e       	mov	r10, r25
 59a:	09 c0       	rjmp	.+18     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 59c:	a2 fe       	sbrs	r10, 2
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a0:	b3 94       	inc	r11
 5a2:	b3 94       	inc	r11
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5a6:	8a 2d       	mov	r24, r10
 5a8:	86 78       	andi	r24, 0x86	; 134
 5aa:	09 f0       	breq	.+2      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5ac:	b3 94       	inc	r11
 5ae:	a3 fc       	sbrc	r10, 3
 5b0:	10 c0       	rjmp	.+32     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5b2:	a0 fe       	sbrs	r10, 0
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5b6:	b2 14       	cp	r11, r2
 5b8:	80 f4       	brcc	.+32     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5ba:	28 0c       	add	r2, r8
 5bc:	92 2c       	mov	r9, r2
 5be:	9b 18       	sub	r9, r11
 5c0:	0d c0       	rjmp	.+26     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5c2:	b2 14       	cp	r11, r2
 5c4:	58 f4       	brcc	.+22     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5c6:	b6 01       	movw	r22, r12
 5c8:	80 e2       	ldi	r24, 0x20	; 32
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	60 d0       	rcall	.+192    	; 0x68e <fputc>
 5ce:	b3 94       	inc	r11
 5d0:	f8 cf       	rjmp	.-16     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5d2:	b2 14       	cp	r11, r2
 5d4:	18 f4       	brcc	.+6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d6:	2b 18       	sub	r2, r11
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5da:	98 2c       	mov	r9, r8
 5dc:	21 2c       	mov	r2, r1
 5de:	a4 fe       	sbrs	r10, 4
 5e0:	0f c0       	rjmp	.+30     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5e2:	b6 01       	movw	r22, r12
 5e4:	80 e3       	ldi	r24, 0x30	; 48
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	52 d0       	rcall	.+164    	; 0x68e <fputc>
 5ea:	a2 fe       	sbrs	r10, 2
 5ec:	16 c0       	rjmp	.+44     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 5ee:	a1 fc       	sbrc	r10, 1
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f2:	88 e7       	ldi	r24, 0x78	; 120
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f8:	88 e5       	ldi	r24, 0x58	; 88
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	b6 01       	movw	r22, r12
 5fe:	0c c0       	rjmp	.+24     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 600:	8a 2d       	mov	r24, r10
 602:	86 78       	andi	r24, 0x86	; 134
 604:	51 f0       	breq	.+20     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 606:	a1 fe       	sbrs	r10, 1
 608:	02 c0       	rjmp	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60a:	8b e2       	ldi	r24, 0x2B	; 43
 60c:	01 c0       	rjmp	.+2      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 60e:	80 e2       	ldi	r24, 0x20	; 32
 610:	a7 fc       	sbrc	r10, 7
 612:	8d e2       	ldi	r24, 0x2D	; 45
 614:	b6 01       	movw	r22, r12
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	3a d0       	rcall	.+116    	; 0x68e <fputc>
 61a:	89 14       	cp	r8, r9
 61c:	30 f4       	brcc	.+12     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 61e:	b6 01       	movw	r22, r12
 620:	80 e3       	ldi	r24, 0x30	; 48
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	34 d0       	rcall	.+104    	; 0x68e <fputc>
 626:	9a 94       	dec	r9
 628:	f8 cf       	rjmp	.-16     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 62a:	8a 94       	dec	r8
 62c:	f3 01       	movw	r30, r6
 62e:	e8 0d       	add	r30, r8
 630:	f1 1d       	adc	r31, r1
 632:	80 81       	ld	r24, Z
 634:	b6 01       	movw	r22, r12
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	2a d0       	rcall	.+84     	; 0x68e <fputc>
 63a:	81 10       	cpse	r8, r1
 63c:	f6 cf       	rjmp	.-20     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 63e:	22 20       	and	r2, r2
 640:	09 f4       	brne	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 642:	4e ce       	rjmp	.-868    	; 0x2e0 <vfprintf+0x22>
 644:	b6 01       	movw	r22, r12
 646:	80 e2       	ldi	r24, 0x20	; 32
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	21 d0       	rcall	.+66     	; 0x68e <fputc>
 64c:	2a 94       	dec	r2
 64e:	f7 cf       	rjmp	.-18     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 650:	f6 01       	movw	r30, r12
 652:	86 81       	ldd	r24, Z+6	; 0x06
 654:	97 81       	ldd	r25, Z+7	; 0x07
 656:	02 c0       	rjmp	.+4      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	2b 96       	adiw	r28, 0x0b	; 11
 65e:	e2 e1       	ldi	r30, 0x12	; 18
 660:	c9 c0       	rjmp	.+402    	; 0x7f4 <__epilogue_restores__>

00000662 <strnlen_P>:
 662:	fc 01       	movw	r30, r24
 664:	05 90       	lpm	r0, Z+
 666:	61 50       	subi	r22, 0x01	; 1
 668:	70 40       	sbci	r23, 0x00	; 0
 66a:	01 10       	cpse	r0, r1
 66c:	d8 f7       	brcc	.-10     	; 0x664 <strnlen_P+0x2>
 66e:	80 95       	com	r24
 670:	90 95       	com	r25
 672:	8e 0f       	add	r24, r30
 674:	9f 1f       	adc	r25, r31
 676:	08 95       	ret

00000678 <strnlen>:
 678:	fc 01       	movw	r30, r24
 67a:	61 50       	subi	r22, 0x01	; 1
 67c:	70 40       	sbci	r23, 0x00	; 0
 67e:	01 90       	ld	r0, Z+
 680:	01 10       	cpse	r0, r1
 682:	d8 f7       	brcc	.-10     	; 0x67a <strnlen+0x2>
 684:	80 95       	com	r24
 686:	90 95       	com	r25
 688:	8e 0f       	add	r24, r30
 68a:	9f 1f       	adc	r25, r31
 68c:	08 95       	ret

0000068e <fputc>:
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	fb 01       	movw	r30, r22
 698:	23 81       	ldd	r18, Z+3	; 0x03
 69a:	21 fd       	sbrc	r18, 1
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <fputc+0x16>
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	9f ef       	ldi	r25, 0xFF	; 255
 6a2:	2c c0       	rjmp	.+88     	; 0x6fc <fputc+0x6e>
 6a4:	22 ff       	sbrs	r18, 2
 6a6:	16 c0       	rjmp	.+44     	; 0x6d4 <fputc+0x46>
 6a8:	46 81       	ldd	r20, Z+6	; 0x06
 6aa:	57 81       	ldd	r21, Z+7	; 0x07
 6ac:	24 81       	ldd	r18, Z+4	; 0x04
 6ae:	35 81       	ldd	r19, Z+5	; 0x05
 6b0:	42 17       	cp	r20, r18
 6b2:	53 07       	cpc	r21, r19
 6b4:	44 f4       	brge	.+16     	; 0x6c6 <fputc+0x38>
 6b6:	a0 81       	ld	r26, Z
 6b8:	b1 81       	ldd	r27, Z+1	; 0x01
 6ba:	9d 01       	movw	r18, r26
 6bc:	2f 5f       	subi	r18, 0xFF	; 255
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	20 83       	st	Z, r18
 6c2:	31 83       	std	Z+1, r19	; 0x01
 6c4:	8c 93       	st	X, r24
 6c6:	26 81       	ldd	r18, Z+6	; 0x06
 6c8:	37 81       	ldd	r19, Z+7	; 0x07
 6ca:	2f 5f       	subi	r18, 0xFF	; 255
 6cc:	3f 4f       	sbci	r19, 0xFF	; 255
 6ce:	26 83       	std	Z+6, r18	; 0x06
 6d0:	37 83       	std	Z+7, r19	; 0x07
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <fputc+0x6e>
 6d4:	8b 01       	movw	r16, r22
 6d6:	ec 01       	movw	r28, r24
 6d8:	fb 01       	movw	r30, r22
 6da:	00 84       	ldd	r0, Z+8	; 0x08
 6dc:	f1 85       	ldd	r31, Z+9	; 0x09
 6de:	e0 2d       	mov	r30, r0
 6e0:	09 95       	icall
 6e2:	89 2b       	or	r24, r25
 6e4:	e1 f6       	brne	.-72     	; 0x69e <fputc+0x10>
 6e6:	d8 01       	movw	r26, r16
 6e8:	16 96       	adiw	r26, 0x06	; 6
 6ea:	8d 91       	ld	r24, X+
 6ec:	9c 91       	ld	r25, X
 6ee:	17 97       	sbiw	r26, 0x07	; 7
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	16 96       	adiw	r26, 0x06	; 6
 6f4:	8d 93       	st	X+, r24
 6f6:	9c 93       	st	X, r25
 6f8:	17 97       	sbiw	r26, 0x07	; 7
 6fa:	ce 01       	movw	r24, r28
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	08 95       	ret

00000706 <__ultoa_invert>:
 706:	fa 01       	movw	r30, r20
 708:	aa 27       	eor	r26, r26
 70a:	28 30       	cpi	r18, 0x08	; 8
 70c:	51 f1       	breq	.+84     	; 0x762 <__ultoa_invert+0x5c>
 70e:	20 31       	cpi	r18, 0x10	; 16
 710:	81 f1       	breq	.+96     	; 0x772 <__ultoa_invert+0x6c>
 712:	e8 94       	clt
 714:	6f 93       	push	r22
 716:	6e 7f       	andi	r22, 0xFE	; 254
 718:	6e 5f       	subi	r22, 0xFE	; 254
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	af 4f       	sbci	r26, 0xFF	; 255
 722:	b1 e0       	ldi	r27, 0x01	; 1
 724:	3e d0       	rcall	.+124    	; 0x7a2 <__ultoa_invert+0x9c>
 726:	b4 e0       	ldi	r27, 0x04	; 4
 728:	3c d0       	rcall	.+120    	; 0x7a2 <__ultoa_invert+0x9c>
 72a:	67 0f       	add	r22, r23
 72c:	78 1f       	adc	r23, r24
 72e:	89 1f       	adc	r24, r25
 730:	9a 1f       	adc	r25, r26
 732:	a1 1d       	adc	r26, r1
 734:	68 0f       	add	r22, r24
 736:	79 1f       	adc	r23, r25
 738:	8a 1f       	adc	r24, r26
 73a:	91 1d       	adc	r25, r1
 73c:	a1 1d       	adc	r26, r1
 73e:	6a 0f       	add	r22, r26
 740:	71 1d       	adc	r23, r1
 742:	81 1d       	adc	r24, r1
 744:	91 1d       	adc	r25, r1
 746:	a1 1d       	adc	r26, r1
 748:	20 d0       	rcall	.+64     	; 0x78a <__ultoa_invert+0x84>
 74a:	09 f4       	brne	.+2      	; 0x74e <__ultoa_invert+0x48>
 74c:	68 94       	set
 74e:	3f 91       	pop	r19
 750:	2a e0       	ldi	r18, 0x0A	; 10
 752:	26 9f       	mul	r18, r22
 754:	11 24       	eor	r1, r1
 756:	30 19       	sub	r19, r0
 758:	30 5d       	subi	r19, 0xD0	; 208
 75a:	31 93       	st	Z+, r19
 75c:	de f6       	brtc	.-74     	; 0x714 <__ultoa_invert+0xe>
 75e:	cf 01       	movw	r24, r30
 760:	08 95       	ret
 762:	46 2f       	mov	r20, r22
 764:	47 70       	andi	r20, 0x07	; 7
 766:	40 5d       	subi	r20, 0xD0	; 208
 768:	41 93       	st	Z+, r20
 76a:	b3 e0       	ldi	r27, 0x03	; 3
 76c:	0f d0       	rcall	.+30     	; 0x78c <__ultoa_invert+0x86>
 76e:	c9 f7       	brne	.-14     	; 0x762 <__ultoa_invert+0x5c>
 770:	f6 cf       	rjmp	.-20     	; 0x75e <__ultoa_invert+0x58>
 772:	46 2f       	mov	r20, r22
 774:	4f 70       	andi	r20, 0x0F	; 15
 776:	40 5d       	subi	r20, 0xD0	; 208
 778:	4a 33       	cpi	r20, 0x3A	; 58
 77a:	18 f0       	brcs	.+6      	; 0x782 <__ultoa_invert+0x7c>
 77c:	49 5d       	subi	r20, 0xD9	; 217
 77e:	31 fd       	sbrc	r19, 1
 780:	40 52       	subi	r20, 0x20	; 32
 782:	41 93       	st	Z+, r20
 784:	02 d0       	rcall	.+4      	; 0x78a <__ultoa_invert+0x84>
 786:	a9 f7       	brne	.-22     	; 0x772 <__ultoa_invert+0x6c>
 788:	ea cf       	rjmp	.-44     	; 0x75e <__ultoa_invert+0x58>
 78a:	b4 e0       	ldi	r27, 0x04	; 4
 78c:	a6 95       	lsr	r26
 78e:	97 95       	ror	r25
 790:	87 95       	ror	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	ba 95       	dec	r27
 798:	c9 f7       	brne	.-14     	; 0x78c <__ultoa_invert+0x86>
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	61 05       	cpc	r22, r1
 79e:	71 05       	cpc	r23, r1
 7a0:	08 95       	ret
 7a2:	9b 01       	movw	r18, r22
 7a4:	ac 01       	movw	r20, r24
 7a6:	0a 2e       	mov	r0, r26
 7a8:	06 94       	lsr	r0
 7aa:	57 95       	ror	r21
 7ac:	47 95       	ror	r20
 7ae:	37 95       	ror	r19
 7b0:	27 95       	ror	r18
 7b2:	ba 95       	dec	r27
 7b4:	c9 f7       	brne	.-14     	; 0x7a8 <__ultoa_invert+0xa2>
 7b6:	62 0f       	add	r22, r18
 7b8:	73 1f       	adc	r23, r19
 7ba:	84 1f       	adc	r24, r20
 7bc:	95 1f       	adc	r25, r21
 7be:	a0 1d       	adc	r26, r0
 7c0:	08 95       	ret

000007c2 <__prologue_saves__>:
 7c2:	2f 92       	push	r2
 7c4:	3f 92       	push	r3
 7c6:	4f 92       	push	r4
 7c8:	5f 92       	push	r5
 7ca:	6f 92       	push	r6
 7cc:	7f 92       	push	r7
 7ce:	8f 92       	push	r8
 7d0:	9f 92       	push	r9
 7d2:	af 92       	push	r10
 7d4:	bf 92       	push	r11
 7d6:	cf 92       	push	r12
 7d8:	df 92       	push	r13
 7da:	ef 92       	push	r14
 7dc:	ff 92       	push	r15
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	ca 1b       	sub	r28, r26
 7ec:	db 0b       	sbc	r29, r27
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	09 94       	ijmp

000007f4 <__epilogue_restores__>:
 7f4:	2a 88       	ldd	r2, Y+18	; 0x12
 7f6:	39 88       	ldd	r3, Y+17	; 0x11
 7f8:	48 88       	ldd	r4, Y+16	; 0x10
 7fa:	5f 84       	ldd	r5, Y+15	; 0x0f
 7fc:	6e 84       	ldd	r6, Y+14	; 0x0e
 7fe:	7d 84       	ldd	r7, Y+13	; 0x0d
 800:	8c 84       	ldd	r8, Y+12	; 0x0c
 802:	9b 84       	ldd	r9, Y+11	; 0x0b
 804:	aa 84       	ldd	r10, Y+10	; 0x0a
 806:	b9 84       	ldd	r11, Y+9	; 0x09
 808:	c8 84       	ldd	r12, Y+8	; 0x08
 80a:	df 80       	ldd	r13, Y+7	; 0x07
 80c:	ee 80       	ldd	r14, Y+6	; 0x06
 80e:	fd 80       	ldd	r15, Y+5	; 0x05
 810:	0c 81       	ldd	r16, Y+4	; 0x04
 812:	1b 81       	ldd	r17, Y+3	; 0x03
 814:	aa 81       	ldd	r26, Y+2	; 0x02
 816:	b9 81       	ldd	r27, Y+1	; 0x01
 818:	ce 0f       	add	r28, r30
 81a:	d1 1d       	adc	r29, r1
 81c:	cd bf       	out	0x3d, r28	; 61
 81e:	de bf       	out	0x3e, r29	; 62
 820:	ed 01       	movw	r28, r26
 822:	08 95       	ret

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
