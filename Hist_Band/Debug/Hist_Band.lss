
Hist_Band.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  00000b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a2e  00000100  00000100  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  00008b2e  00000b2e  00000ac2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000001d  00803f00  00803f00  00000b4e  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e8  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000030a3  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d97  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000098a  00000000  00000000  00005b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001bc  00000000  00000000  00006494  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001645  00000000  00000000  00006650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002bd  00000000  00000000  00007c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  00007f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000100 <__vectors>:
 100:	19 c0       	rjmp	.+50     	; 0x134 <__ctors_end>
 102:	28 c0       	rjmp	.+80     	; 0x154 <__bad_interrupt>
 104:	27 c0       	rjmp	.+78     	; 0x154 <__bad_interrupt>
 106:	26 c0       	rjmp	.+76     	; 0x154 <__bad_interrupt>
 108:	25 c0       	rjmp	.+74     	; 0x154 <__bad_interrupt>
 10a:	24 c0       	rjmp	.+72     	; 0x154 <__bad_interrupt>
 10c:	1d c1       	rjmp	.+570    	; 0x348 <__vector_6>
 10e:	22 c0       	rjmp	.+68     	; 0x154 <__bad_interrupt>
 110:	21 c0       	rjmp	.+66     	; 0x154 <__bad_interrupt>
 112:	20 c0       	rjmp	.+64     	; 0x154 <__bad_interrupt>
 114:	1f c0       	rjmp	.+62     	; 0x154 <__bad_interrupt>
 116:	1e c0       	rjmp	.+60     	; 0x154 <__bad_interrupt>
 118:	1d c0       	rjmp	.+58     	; 0x154 <__bad_interrupt>
 11a:	1c c0       	rjmp	.+56     	; 0x154 <__bad_interrupt>
 11c:	1b c0       	rjmp	.+54     	; 0x154 <__bad_interrupt>
 11e:	1a c0       	rjmp	.+52     	; 0x154 <__bad_interrupt>
 120:	19 c0       	rjmp	.+50     	; 0x154 <__bad_interrupt>
 122:	19 c0       	rjmp	.+50     	; 0x156 <__vector_17>
 124:	17 c0       	rjmp	.+46     	; 0x154 <__bad_interrupt>
 126:	16 c0       	rjmp	.+44     	; 0x154 <__bad_interrupt>
 128:	15 c0       	rjmp	.+42     	; 0x154 <__bad_interrupt>
 12a:	14 c0       	rjmp	.+40     	; 0x154 <__bad_interrupt>
 12c:	b4 c0       	rjmp	.+360    	; 0x296 <__vector_22>
 12e:	12 c0       	rjmp	.+36     	; 0x154 <__bad_interrupt>
 130:	11 c0       	rjmp	.+34     	; 0x154 <__bad_interrupt>
 132:	10 c0       	rjmp	.+32     	; 0x154 <__bad_interrupt>

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df e3       	ldi	r29, 0x3F	; 63
 13e:	de bf       	out	0x3e, r29	; 62

00000140 <__do_clear_bss>:
 140:	2f e3       	ldi	r18, 0x3F	; 63
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	bf e3       	ldi	r27, 0x3F	; 63
 146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
 148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
 14a:	ad 31       	cpi	r26, 0x1D	; 29
 14c:	b2 07       	cpc	r27, r18
 14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
 150:	0c d1       	rcall	.+536    	; 0x36a <main>
 152:	eb c4       	rjmp	.+2518   	; 0xb2a <_exit>

00000154 <__bad_interrupt>:
 154:	d5 cf       	rjmp	.-86     	; 0x100 <__vectors>

00000156 <__vector_17>:
Clears the Interrupt Flag: The interruption can't be triggered repeatedly until a new condition occurs
Reads the ADC Result: The ADC0 conversion data is stored in the global variable "sample"
Starts a New Conversion: The ISR triggers a new ADC conversion, ensuring that the ADC is 
continuously sampling new data and the process is ongoing.*/
ISR(ADC0_RESRDY_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	8f 93       	push	r24
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
 16a:	e0 e0       	ldi	r30, 0x00	; 0
 16c:	f6 e0       	ldi	r31, 0x06	; 6
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	83 87       	std	Z+11, r24	; 0x0b
	
	sample = ADC0.RES;
 172:	20 89       	ldd	r18, Z+16	; 0x10
 174:	31 89       	ldd	r19, Z+17	; 0x11
 176:	20 93 06 3f 	sts	0x3F06, r18	; 0x803f06 <sample>
 17a:	30 93 07 3f 	sts	0x3F07, r19	; 0x803f07 <sample+0x1>
	
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
 17e:	80 87       	std	Z+8, r24	; 0x08
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	8f 91       	pop	r24
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <ADC0_init>:
/*This initialization ensures that the ADC is ready to perform accurate 
conversions and trigger interrupts when new conversion results are available.*/
void ADC0_init(void)
{
	/* Disable digital input buffer */
	PORTA.PIN4CTRL &= ~PORT_ISC_gm;
 194:	e0 e0       	ldi	r30, 0x00	; 0
 196:	f4 e0       	ldi	r31, 0x04	; 4
 198:	84 89       	ldd	r24, Z+20	; 0x14
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 19e:	84 89       	ldd	r24, Z+20	; 0x14
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	84 8b       	std	Z+20, r24	; 0x14
	
	/* Disable pull-up resistor */
	PORTA.PIN4CTRL &= ~PORT_PULLUPEN_bm;
 1a4:	84 89       	ldd	r24, Z+20	; 0x14
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	84 8b       	std	Z+20, r24	; 0x14
	
	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	/* Voltage reference  2.5V */
 1aa:	e0 ea       	ldi	r30, 0xA0	; 160
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24
	VREF.CTRLB |= VREF_ADC0REFEN_bm;		/* Force Voltage reference */
 1b4:	81 81       	ldd	r24, Z+1	; 0x01
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	81 83       	std	Z+1, r24	; 0x01
	
	ADC0.CTRLC = ADC_PRESC_DIV8_gc |		/* CLK_PER divided by 8 */
 1ba:	e0 e0       	ldi	r30, 0x00	; 0
 1bc:	f6 e0       	ldi	r31, 0x06	; 6
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	82 83       	std	Z+2, r24	; 0x02
	ADC_REFSEL_INTREF_gc;					/* Internal reference */
	
	ADC0.CTRLA |= ADC_ENABLE_bm |			/* ADC Enable: enabled */
 1c2:	80 81       	ld	r24, Z
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	80 83       	st	Z, r24
	ADC_RESSEL_10BIT_gc;					/* 10-bit mode */
	
	/* Enable ADC interrupt */
	ADC0.INTCTRL = ADC_RESRDY_bm;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	82 87       	std	Z+10, r24	; 0x0a
	
	/* Select ADC channel */
	ADC0.MUXPOS = ADC_MUXPOS_AIN4_gc;
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	86 83       	std	Z+6, r24	; 0x06
 1d0:	08 95       	ret

000001d2 <ADC0_start>:
After starting the conversion, the ADC will sample the input signal, convert it to a digital value, and set an interrupt flag 
(if configured) when the conversion is complete, allowing the program to read the result.*/
void ADC0_start(void)
{
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <delim+0x7f7aad>
 1d8:	08 95       	ret

000001da <temp_conv>:
}

uint8_t temp_conv(int *temperature){
	*temperature = (sample);
 1da:	20 91 06 3f 	lds	r18, 0x3F06	; 0x803f06 <sample>
 1de:	30 91 07 3f 	lds	r19, 0x3F07	; 0x803f07 <sample+0x1>
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
 1e6:	31 83       	std	Z+1, r19	; 0x01
	return 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	08 95       	ret

000001ec <CLKCTRL_init>:
It sets the clock prescaler to divide the system clock by 8 and enables the prescaler.
It configures the 20 MHz internal oscillator as the clock source and disables clock output to external pins.
It waits until the clock system has stabilized and the changes are applied. */
void CLKCTRL_init(void)
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_16X_gc | CLKCTRL_PEN_bm);
 1ec:	88 ed       	ldi	r24, 0xD8	; 216
 1ee:	27 e0       	ldi	r18, 0x07	; 7
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	84 bf       	out	0x34, r24	; 52
 1f4:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <delim+0x7f7506>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, !CLKCTRL_CLKOUT_bm | CLKCTRL_CLKSEL_OSC20M_gc);
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	84 bf       	out	0x34, r24	; 52
 1fe:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <delim+0x7f7505>
	while (!(CLKCTRL.MCLKSTATUS));
 202:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <delim+0x7f7508>
 206:	88 23       	and	r24, r24
 208:	e1 f3       	breq	.-8      	; 0x202 <CLKCTRL_init+0x16>
}
 20a:	08 95       	ret

0000020c <RTC_init>:
It sets the period value to 0x44 (68 decimal), meaning the RTC will generate an overflow event after counting to this value.
It enables the overflow interrupt, so that an interrupt is triggered when the RTC overflows,
while disabling the compare match interrupt. */
void RTC_init(void)
{
	RTC.CTRLA = RTC_PRESCALER_DIV512_gc /* 512 */
 20c:	e0 e4       	ldi	r30, 0x40	; 64
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	89 e4       	ldi	r24, 0x49	; 73
 212:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp     /* Enable: enabled */
	| 0 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	RTC.PER = 0x44; /* Period: 0xd */
 214:	84 e4       	ldi	r24, 0x44	; 68
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	82 87       	std	Z+10, r24	; 0x0a
 21a:	93 87       	std	Z+11, r25	; 0x0b

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	82 83       	std	Z+2, r24	; 0x02
 220:	08 95       	ret

00000222 <GPIO_init>:
#include "gpio.h"

/*This function looks for the direction of PORTA and configures its pin 2 as an output pin*/
void GPIO_init(void)
{
	PORTA.DIR |= PIN2_bm;
 222:	e0 e0       	ldi	r30, 0x00	; 0
 224:	f4 e0       	ldi	r31, 0x04	; 4
 226:	80 81       	ld	r24, Z
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	80 83       	st	Z, r24
 22c:	08 95       	ret

0000022e <GPIO_relay>:
/*This function takes the active value (True or False) to work like:
If active = true, the relay is turned on by setting the output of pin 2 to HIGH.
If active = false, the relay is turned off by setting the output of pin 2 to LOW.*/
void GPIO_relay(bool active)
{
	if(active) {
 22e:	88 23       	and	r24, r24
 230:	31 f0       	breq	.+12     	; 0x23e <GPIO_relay+0x10>
		PORTA.OUT |= PIN2_bm;
 232:	e0 e0       	ldi	r30, 0x00	; 0
 234:	f4 e0       	ldi	r31, 0x04	; 4
 236:	84 81       	ldd	r24, Z+4	; 0x04
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	84 83       	std	Z+4, r24	; 0x04
 23c:	08 95       	ret
		} else {
		PORTA.OUT &= ~PIN2_bm;
 23e:	e0 e0       	ldi	r30, 0x00	; 0
 240:	f4 e0       	ldi	r31, 0x04	; 4
 242:	84 81       	ldd	r24, Z+4	; 0x04
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	84 83       	std	Z+4, r24	; 0x04
 248:	08 95       	ret

0000024a <UART_init>:
/*This function initializes the UART with the necessary parameters like baud rate, and activating both
Receiver and Transmitter so it can get and send data though the same UART*/
void UART_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
 24a:	e0 e0       	ldi	r30, 0x00	; 0
 24c:	f8 e0       	ldi	r31, 0x08	; 8
 24e:	81 ea       	ldi	r24, 0xA1	; 161
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	80 87       	std	Z+8, r24	; 0x08
 254:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = USART_RXCIE_bm;  /* Receive Complete Interrupt Enable: enabled */
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	85 83       	std	Z+5, r24	; 0x05
	
	USART0.CTRLB = USART_RXEN_bm |    /* Receiver Enable: enabled */
 25a:	80 ec       	ldi	r24, 0xC0	; 192
 25c:	86 83       	std	Z+6, r24	; 0x06
	USART_TXEN_bm;    /* Transmitter Enable: enabled */
	
	/* Set TxD (PB2) as output */
	PORTB.DIR |= PIN2_bm;
 25e:	e0 e2       	ldi	r30, 0x20	; 32
 260:	f4 e0       	ldi	r31, 0x04	; 4
 262:	80 81       	ld	r24, Z
 264:	84 60       	ori	r24, 0x04	; 4
 266:	80 83       	st	Z, r24
 268:	08 95       	ret

0000026a <UART_SendString>:

/*This function takes a string and sends each character over UART until it reaches the end of the string (null terminator).
It ensures that each byte is sent only when the transmit buffer is empty and 
waits for the entire transmission to complete before clearing the corresponding flag.*/
void UART_SendString(const char *str)
{
 26a:	fc 01       	movw	r30, r24
	while (*str != '\0')
 26c:	07 c0       	rjmp	.+14     	; 0x27c <UART_SendString+0x12>
	{
		while (!(USART0.STATUS & USART_DREIF_bm)); //wait until Tx buffer is empty
 26e:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <delim+0x7f7ca9>
 272:	95 ff       	sbrs	r25, 5
 274:	fc cf       	rjmp	.-8      	; 0x26e <UART_SendString+0x4>
		
		USART0.TXDATAL = *str;
 276:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <delim+0x7f7ca7>
		str++;
 27a:	31 96       	adiw	r30, 0x01	; 1
/*This function takes a string and sends each character over UART until it reaches the end of the string (null terminator).
It ensures that each byte is sent only when the transmit buffer is empty and 
waits for the entire transmission to complete before clearing the corresponding flag.*/
void UART_SendString(const char *str)
{
	while (*str != '\0')
 27c:	80 81       	ld	r24, Z
 27e:	81 11       	cpse	r24, r1
 280:	f6 cf       	rjmp	.-20     	; 0x26e <UART_SendString+0x4>
		while (!(USART0.STATUS & USART_DREIF_bm)); //wait until Tx buffer is empty
		
		USART0.TXDATAL = *str;
		str++;
	}
	while (!(USART0.STATUS & USART_TXCIF_bm)); //wait until Tx finished
 282:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <delim+0x7f7ca9>
 286:	86 ff       	sbrs	r24, 6
 288:	fc cf       	rjmp	.-8      	; 0x282 <UART_SendString+0x18>
	
	USART0.STATUS |= USART_TXCIF_bm;
 28a:	e0 e0       	ldi	r30, 0x00	; 0
 28c:	f8 e0       	ldi	r31, 0x08	; 8
 28e:	84 81       	ldd	r24, Z+4	; 0x04
 290:	80 64       	ori	r24, 0x40	; 64
 292:	84 83       	std	Z+4, r24	; 0x04
 294:	08 95       	ret

00000296 <__vector_22>:
It stores the received byte in RXBuffer at the current rx_index.
The code checks if the byte is a newline (0x0A) or if the buffer is full. If either is true, the rx_index is reset to 0 
to prepare for the next message. Otherwise, the rx_index is incremented to store the next byte in the buffer.
The commented DataRDY = true; line is used to indicate when a complete message has been received.*/
ISR(USART0_RXC_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	RXBuffer[rx_index] = USART0.RXDATAL;
 2a8:	80 91 03 3f 	lds	r24, 0x3F03	; 0x803f03 <rx_index>
 2ac:	e8 2f       	mov	r30, r24
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <delim+0x7f7ca5>
 2b4:	e7 5f       	subi	r30, 0xF7	; 247
 2b6:	f0 4c       	sbci	r31, 0xC0	; 192
 2b8:	90 83       	st	Z, r25
	
	if((RXBuffer[rx_index] == 0x0A) || (rx_index == 19)) {
 2ba:	9a 30       	cpi	r25, 0x0A	; 10
 2bc:	11 f0       	breq	.+4      	; 0x2c2 <__vector_22+0x2c>
 2be:	83 31       	cpi	r24, 0x13	; 19
 2c0:	31 f4       	brne	.+12     	; 0x2ce <__vector_22+0x38>
		UART_drdy = true;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <UART_drdy>
		rx_index = 0;
 2c8:	10 92 03 3f 	sts	0x3F03, r1	; 0x803f03 <rx_index>
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <__vector_22+0x3e>
		} else {
		rx_index++;
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 03 3f 	sts	0x3F03, r24	; 0x803f03 <rx_index>
	}
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <data_process>:

/*This function was made to receive the data sent via UART after taking the string from the Bluetooth module, it takes the
string and divides it to look for a number to convert thanks to the ATOI function, saving the numeric values into the pointers
of my low and upper threshold, returning both to the main.c and printing correct execution when checking the control flag*/
uint8_t data_process(int *lower_threshold, int *upper_threshold){
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	8c 01       	movw	r16, r24
 2f0:	eb 01       	movw	r28, r22
	char *token = strtok((char *)RXBuffer, delim);
 2f2:	6b e5       	ldi	r22, 0x5B	; 91
 2f4:	7b e8       	ldi	r23, 0x8B	; 139
 2f6:	89 e0       	ldi	r24, 0x09	; 9
 2f8:	9f e3       	ldi	r25, 0x3F	; 63
 2fa:	12 d1       	rcall	.+548    	; 0x520 <strtok>
	if (token != NULL){
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	21 f0       	breq	.+8      	; 0x308 <data_process+0x22>
		*lower_threshold = atoi(token);
 300:	f1 d0       	rcall	.+482    	; 0x4e4 <atoi>
 302:	f8 01       	movw	r30, r16
 304:	80 83       	st	Z, r24
 306:	91 83       	std	Z+1, r25	; 0x01
	}
	token = strtok(NULL, delim);
 308:	6b e5       	ldi	r22, 0x5B	; 91
 30a:	7b e8       	ldi	r23, 0x8B	; 139
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	07 d1       	rcall	.+526    	; 0x520 <strtok>
	if (token != NULL){
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	19 f0       	breq	.+6      	; 0x31c <data_process+0x36>
		*upper_threshold = atoi(token);
 316:	e6 d0       	rcall	.+460    	; 0x4e4 <atoi>
 318:	88 83       	st	Y, r24
 31a:	99 83       	std	Y+1, r25	; 0x01
	}
	if (*lower_threshold < *upper_threshold){
 31c:	f8 01       	movw	r30, r16
 31e:	20 81       	ld	r18, Z
 320:	31 81       	ldd	r19, Z+1	; 0x01
 322:	88 81       	ld	r24, Y
 324:	99 81       	ldd	r25, Y+1	; 0x01
 326:	28 17       	cp	r18, r24
 328:	39 07       	cpc	r19, r25
 32a:	2c f4       	brge	.+10     	; 0x336 <data_process+0x50>
		UART_SendString("Data received correctly");
 32c:	8e e2       	ldi	r24, 0x2E	; 46
 32e:	9b e8       	ldi	r25, 0x8B	; 139
 330:	9c df       	rcall	.-200    	; 0x26a <UART_SendString>
		return 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	04 c0       	rjmp	.+8      	; 0x33e <data_process+0x58>
	} else {
		UART_SendString("Error receiving data");
 336:	86 e4       	ldi	r24, 0x46	; 70
 338:	9b e8       	ldi	r25, 0x8B	; 139
 33a:	97 df       	rcall	.-210    	; 0x26a <UART_SendString>
		return 0;
 33c:	80 e0       	ldi	r24, 0x00	; 0
	}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <__vector_6>:

extern bool UART_drdy; //Variable which determines whether the information sent via UART is ready or not to be processed
bool relay_state = false; //Variable to know if the rele is activated or not

ISR(RTC_CNT_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
	/* Insert your RTC Overflow interrupt handling code */
	state = true;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 05 3f 	sts	0x3F05, r24	; 0x803f05 <state>
	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
 35a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <delim+0x7f75e8>
}
 35e:	8f 91       	pop	r24
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <main>:

int main(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	ae 97       	sbiw	r28, 0x2e	; 46
 374:	cd bf       	out	0x3d, r28	; 61
 376:	de bf       	out	0x3e, r29	; 62
	/* Configure modules, Initialize all needed functions */
	CLKCTRL_init();
 378:	39 df       	rcall	.-398    	; 0x1ec <CLKCTRL_init>
	RTC_init();
 37a:	48 df       	rcall	.-368    	; 0x20c <RTC_init>
	ADC0_init();
 37c:	0b df       	rcall	.-490    	; 0x194 <ADC0_init>
	GPIO_init();
 37e:	51 df       	rcall	.-350    	; 0x222 <GPIO_init>
	UART_init();
 380:	64 df       	rcall	.-312    	; 0x24a <UART_init>
	
	int low_threshold = 20;
 382:	84 e1       	ldi	r24, 0x14	; 20
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	9a 83       	std	Y+2, r25	; 0x02
	int upper_threshold = 40;
 38a:	88 e2       	ldi	r24, 0x28	; 40
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	8b 83       	std	Y+3, r24	; 0x03
 390:	9c 83       	std	Y+4, r25	; 0x04
	int temperature;
	
	countTime = 0;	//Seconds counter
 392:	10 92 08 3f 	sts	0x3F08, r1	; 0x803f08 <countTime>
	char CommCon[40];	//String buffer
	
	memset(CommCon,0,40);	//Cleans the buffer by adding zeros to each position
 396:	ce 01       	movw	r24, r28
 398:	07 96       	adiw	r24, 0x07	; 7
 39a:	28 e2       	ldi	r18, 0x28	; 40
 39c:	fc 01       	movw	r30, r24
 39e:	11 92       	st	Z+, r1
 3a0:	2a 95       	dec	r18
 3a2:	e9 f7       	brne	.-6      	; 0x39e <main+0x34>
	sprintf(CommCon, "HisBand Pro 1.0\r\n");
 3a4:	22 e1       	ldi	r18, 0x12	; 18
 3a6:	e3 e6       	ldi	r30, 0x63	; 99
 3a8:	fb e8       	ldi	r31, 0x8B	; 139
 3aa:	dc 01       	movw	r26, r24
 3ac:	01 90       	ld	r0, Z+
 3ae:	0d 92       	st	X+, r0
 3b0:	2a 95       	dec	r18
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x42>
	UART_SendString(CommCon);
 3b4:	5a df       	rcall	.-332    	; 0x26a <UART_SendString>
	
	/* Enable global interrupt */
	sei();
 3b6:	78 94       	sei
	
	/* Start a conversion */
	ADC0_start();
 3b8:	0c df       	rcall	.-488    	; 0x1d2 <ADC0_start>
	
	/* Replace with your application code */
	while (1)
	{
		if(state) {
 3ba:	80 91 05 3f 	lds	r24, 0x3F05	; 0x803f05 <state>
 3be:	88 23       	and	r24, r24
 3c0:	e1 f3       	breq	.-8      	; 0x3ba <main+0x50>
			temp_conv(&temperature);
 3c2:	ce 01       	movw	r24, r28
 3c4:	05 96       	adiw	r24, 0x05	; 5
 3c6:	09 df       	rcall	.-494    	; 0x1da <temp_conv>
			
			if (countTime == 3) {
 3c8:	80 91 08 3f 	lds	r24, 0x3F08	; 0x803f08 <countTime>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	01 f5       	brne	.+64     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				memset(CommCon, 0, 40);
 3d0:	8e 01       	movw	r16, r28
 3d2:	09 5f       	subi	r16, 0xF9	; 249
 3d4:	1f 4f       	sbci	r17, 0xFF	; 255
 3d6:	88 e2       	ldi	r24, 0x28	; 40
 3d8:	f8 01       	movw	r30, r16
 3da:	11 92       	st	Z+, r1
 3dc:	8a 95       	dec	r24
 3de:	e9 f7       	brne	.-6      	; 0x3da <main+0x70>
				sprintf(CommCon, "Temperature: %d\r\n", sample);
 3e0:	80 91 07 3f 	lds	r24, 0x3F07	; 0x803f07 <sample+0x1>
 3e4:	8f 93       	push	r24
 3e6:	80 91 06 3f 	lds	r24, 0x3F06	; 0x803f06 <sample>
 3ea:	8f 93       	push	r24
 3ec:	88 ea       	ldi	r24, 0xA8	; 168
 3ee:	9b e8       	ldi	r25, 0x8B	; 139
 3f0:	9f 93       	push	r25
 3f2:	8f 93       	push	r24
 3f4:	1f 93       	push	r17
 3f6:	0f 93       	push	r16
 3f8:	c6 d0       	rcall	.+396    	; 0x586 <sprintf>
				UART_SendString(CommCon);
 3fa:	c8 01       	movw	r24, r16
 3fc:	36 df       	rcall	.-404    	; 0x26a <UART_SendString>
				countTime = 0;
 3fe:	10 92 08 3f 	sts	0x3F08, r1	; 0x803f08 <countTime>
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			} else {
				countTime++;
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 93 08 3f 	sts	0x3F08, r24	; 0x803f08 <countTime>
			}
			
			if (sample > upper_threshold && !relay_state) {
 416:	80 91 06 3f 	lds	r24, 0x3F06	; 0x803f06 <sample>
 41a:	90 91 07 3f 	lds	r25, 0x3F07	; 0x803f07 <sample+0x1>
 41e:	2b 81       	ldd	r18, Y+3	; 0x03
 420:	3c 81       	ldd	r19, Y+4	; 0x04
 422:	28 17       	cp	r18, r24
 424:	39 07       	cpc	r19, r25
 426:	38 f5       	brcc	.+78     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 428:	20 91 04 3f 	lds	r18, 0x3F04	; 0x803f04 <relay_state>
 42c:	21 11       	cpse	r18, r1
 42e:	23 c0       	rjmp	.+70     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
				//Activate the relay
				GPIO_relay(true);
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	fd de       	rcall	.-518    	; 0x22e <GPIO_relay>
				relay_state = true;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 04 3f 	sts	0x3F04, r24	; 0x803f04 <relay_state>
				
				//Send activation message
				memset(CommCon, 0, 40);
 43a:	8e 01       	movw	r16, r28
 43c:	09 5f       	subi	r16, 0xF9	; 249
 43e:	1f 4f       	sbci	r17, 0xFF	; 255
 440:	88 e2       	ldi	r24, 0x28	; 40
 442:	f8 01       	movw	r30, r16
 444:	11 92       	st	Z+, r1
 446:	8a 95       	dec	r24
 448:	e9 f7       	brne	.-6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				sprintf(CommCon, "Relay Turned ON-Temperature: %d\r\n",sample);
 44a:	80 91 07 3f 	lds	r24, 0x3F07	; 0x803f07 <sample+0x1>
 44e:	8f 93       	push	r24
 450:	80 91 06 3f 	lds	r24, 0x3F06	; 0x803f06 <sample>
 454:	8f 93       	push	r24
 456:	85 e7       	ldi	r24, 0x75	; 117
 458:	9b e8       	ldi	r25, 0x8B	; 139
 45a:	9f 93       	push	r25
 45c:	8f 93       	push	r24
 45e:	1f 93       	push	r17
 460:	0f 93       	push	r16
 462:	91 d0       	rcall	.+290    	; 0x586 <sprintf>
				UART_SendString(CommCon);
 464:	c8 01       	movw	r24, r16
 466:	01 df       	rcall	.-510    	; 0x26a <UART_SendString>
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	2a c0       	rjmp	.+84     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			} else if (sample < low_threshold && relay_state) {
 476:	29 81       	ldd	r18, Y+1	; 0x01
 478:	3a 81       	ldd	r19, Y+2	; 0x02
 47a:	82 17       	cp	r24, r18
 47c:	93 07       	cpc	r25, r19
 47e:	28 f5       	brcc	.+74     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 480:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <relay_state>
 484:	88 23       	and	r24, r24
 486:	09 f1       	breq	.+66     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				//Deactivate the relay
				GPIO_relay(false);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	d1 de       	rcall	.-606    	; 0x22e <GPIO_relay>
				relay_state = false;
 48c:	10 92 04 3f 	sts	0x3F04, r1	; 0x803f04 <relay_state>
			
				//Send deactivation message
				memset(CommCon, 0, 40);
 490:	8e 01       	movw	r16, r28
 492:	09 5f       	subi	r16, 0xF9	; 249
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	88 e2       	ldi	r24, 0x28	; 40
 498:	f8 01       	movw	r30, r16
 49a:	11 92       	st	Z+, r1
 49c:	8a 95       	dec	r24
 49e:	e9 f7       	brne	.-6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
				sprintf(CommCon, "Relay Turned OFF-Temperature: %d\r\n",sample);
 4a0:	80 91 07 3f 	lds	r24, 0x3F07	; 0x803f07 <sample+0x1>
 4a4:	8f 93       	push	r24
 4a6:	80 91 06 3f 	lds	r24, 0x3F06	; 0x803f06 <sample>
 4aa:	8f 93       	push	r24
 4ac:	87 e9       	ldi	r24, 0x97	; 151
 4ae:	9b e8       	ldi	r25, 0x8B	; 139
 4b0:	9f 93       	push	r25
 4b2:	8f 93       	push	r24
 4b4:	1f 93       	push	r17
 4b6:	0f 93       	push	r16
 4b8:	66 d0       	rcall	.+204    	; 0x586 <sprintf>
				UART_SendString(CommCon);
 4ba:	c8 01       	movw	r24, r16
 4bc:	d6 de       	rcall	.-596    	; 0x26a <UART_SendString>
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
			}
			
			if (UART_drdy)
 4ca:	80 91 02 3f 	lds	r24, 0x3F02	; 0x803f02 <UART_drdy>
 4ce:	88 23       	and	r24, r24
 4d0:	31 f0       	breq	.+12     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			{
				//Get the new values for low and upper threshold
				data_process(&low_threshold, &upper_threshold);
 4d2:	be 01       	movw	r22, r28
 4d4:	6d 5f       	subi	r22, 0xFD	; 253
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	04 df       	rcall	.-504    	; 0x2e6 <data_process>
			}
			state = false;
 4de:	10 92 05 3f 	sts	0x3F05, r1	; 0x803f05 <state>
 4e2:	6b cf       	rjmp	.-298    	; 0x3ba <main+0x50>

000004e4 <atoi>:
 4e4:	fc 01       	movw	r30, r24
 4e6:	88 27       	eor	r24, r24
 4e8:	99 27       	eor	r25, r25
 4ea:	e8 94       	clt
 4ec:	21 91       	ld	r18, Z+
 4ee:	20 32       	cpi	r18, 0x20	; 32
 4f0:	e9 f3       	breq	.-6      	; 0x4ec <atoi+0x8>
 4f2:	29 30       	cpi	r18, 0x09	; 9
 4f4:	10 f0       	brcs	.+4      	; 0x4fa <atoi+0x16>
 4f6:	2e 30       	cpi	r18, 0x0E	; 14
 4f8:	c8 f3       	brcs	.-14     	; 0x4ec <atoi+0x8>
 4fa:	2b 32       	cpi	r18, 0x2B	; 43
 4fc:	41 f0       	breq	.+16     	; 0x50e <atoi+0x2a>
 4fe:	2d 32       	cpi	r18, 0x2D	; 45
 500:	39 f4       	brne	.+14     	; 0x510 <atoi+0x2c>
 502:	68 94       	set
 504:	04 c0       	rjmp	.+8      	; 0x50e <atoi+0x2a>
 506:	0e 94 bb 02 	call	0x576	; 0x576 <__mulhi_const_10>
 50a:	82 0f       	add	r24, r18
 50c:	91 1d       	adc	r25, r1
 50e:	21 91       	ld	r18, Z+
 510:	20 53       	subi	r18, 0x30	; 48
 512:	2a 30       	cpi	r18, 0x0A	; 10
 514:	c0 f3       	brcs	.-16     	; 0x506 <atoi+0x22>
 516:	1e f4       	brtc	.+6      	; 0x51e <atoi+0x3a>
 518:	90 95       	com	r25
 51a:	81 95       	neg	r24
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <strtok>:
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	5f e3       	ldi	r21, 0x3F	; 63
 524:	01 d0       	rcall	.+2      	; 0x528 <strtok_r>
 526:	08 95       	ret

00000528 <strtok_r>:
 528:	fa 01       	movw	r30, r20
 52a:	a1 91       	ld	r26, Z+
 52c:	b0 81       	ld	r27, Z
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	19 f4       	brne	.+6      	; 0x538 <strtok_r+0x10>
 532:	10 97       	sbiw	r26, 0x00	; 0
 534:	e1 f0       	breq	.+56     	; 0x56e <strtok_r+0x46>
 536:	cd 01       	movw	r24, r26
 538:	dc 01       	movw	r26, r24
 53a:	cd 01       	movw	r24, r26
 53c:	0d 90       	ld	r0, X+
 53e:	00 20       	and	r0, r0
 540:	11 f4       	brne	.+4      	; 0x546 <strtok_r+0x1e>
 542:	c0 01       	movw	r24, r0
 544:	13 c0       	rjmp	.+38     	; 0x56c <strtok_r+0x44>
 546:	fb 01       	movw	r30, r22
 548:	21 91       	ld	r18, Z+
 54a:	22 23       	and	r18, r18
 54c:	19 f0       	breq	.+6      	; 0x554 <strtok_r+0x2c>
 54e:	20 15       	cp	r18, r0
 550:	d9 f7       	brne	.-10     	; 0x548 <strtok_r+0x20>
 552:	f3 cf       	rjmp	.-26     	; 0x53a <strtok_r+0x12>
 554:	fb 01       	movw	r30, r22
 556:	21 91       	ld	r18, Z+
 558:	20 15       	cp	r18, r0
 55a:	19 f4       	brne	.+6      	; 0x562 <strtok_r+0x3a>
 55c:	1e 92       	st	-X, r1
 55e:	11 96       	adiw	r26, 0x01	; 1
 560:	06 c0       	rjmp	.+12     	; 0x56e <strtok_r+0x46>
 562:	22 23       	and	r18, r18
 564:	c1 f7       	brne	.-16     	; 0x556 <strtok_r+0x2e>
 566:	0d 90       	ld	r0, X+
 568:	00 20       	and	r0, r0
 56a:	a1 f7       	brne	.-24     	; 0x554 <strtok_r+0x2c>
 56c:	d0 01       	movw	r26, r0
 56e:	fa 01       	movw	r30, r20
 570:	a1 93       	st	Z+, r26
 572:	b0 83       	st	Z, r27
 574:	08 95       	ret

00000576 <__mulhi_const_10>:
 576:	7a e0       	ldi	r23, 0x0A	; 10
 578:	97 9f       	mul	r25, r23
 57a:	90 2d       	mov	r25, r0
 57c:	87 9f       	mul	r24, r23
 57e:	80 2d       	mov	r24, r0
 580:	91 0d       	add	r25, r1
 582:	11 24       	eor	r1, r1
 584:	08 95       	ret

00000586 <sprintf>:
 586:	ae e0       	ldi	r26, 0x0E	; 14
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	e8 ec       	ldi	r30, 0xC8	; 200
 58c:	f2 e0       	ldi	r31, 0x02	; 2
 58e:	aa c2       	rjmp	.+1364   	; 0xae4 <__prologue_saves__+0x1c>
 590:	0d 89       	ldd	r16, Y+21	; 0x15
 592:	1e 89       	ldd	r17, Y+22	; 0x16
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	8c 83       	std	Y+4, r24	; 0x04
 598:	09 83       	std	Y+1, r16	; 0x01
 59a:	1a 83       	std	Y+2, r17	; 0x02
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	9f e7       	ldi	r25, 0x7F	; 127
 5a0:	8d 83       	std	Y+5, r24	; 0x05
 5a2:	9e 83       	std	Y+6, r25	; 0x06
 5a4:	ae 01       	movw	r20, r28
 5a6:	47 5e       	subi	r20, 0xE7	; 231
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	6f 89       	ldd	r22, Y+23	; 0x17
 5ac:	78 8d       	ldd	r23, Y+24	; 0x18
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	08 d0       	rcall	.+16     	; 0x5c4 <vfprintf>
 5b4:	ef 81       	ldd	r30, Y+7	; 0x07
 5b6:	f8 85       	ldd	r31, Y+8	; 0x08
 5b8:	e0 0f       	add	r30, r16
 5ba:	f1 1f       	adc	r31, r17
 5bc:	10 82       	st	Z, r1
 5be:	2e 96       	adiw	r28, 0x0e	; 14
 5c0:	e4 e0       	ldi	r30, 0x04	; 4
 5c2:	a9 c2       	rjmp	.+1362   	; 0xb16 <__epilogue_restores__+0x1c>

000005c4 <vfprintf>:
 5c4:	ab e0       	ldi	r26, 0x0B	; 11
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	e7 ee       	ldi	r30, 0xE7	; 231
 5ca:	f2 e0       	ldi	r31, 0x02	; 2
 5cc:	7d c2       	rjmp	.+1274   	; 0xac8 <__prologue_saves__>
 5ce:	6c 01       	movw	r12, r24
 5d0:	7b 01       	movw	r14, r22
 5d2:	8a 01       	movw	r16, r20
 5d4:	fc 01       	movw	r30, r24
 5d6:	16 82       	std	Z+6, r1	; 0x06
 5d8:	17 82       	std	Z+7, r1	; 0x07
 5da:	83 81       	ldd	r24, Z+3	; 0x03
 5dc:	81 ff       	sbrs	r24, 1
 5de:	bf c1       	rjmp	.+894    	; 0x95e <vfprintf+0x39a>
 5e0:	ce 01       	movw	r24, r28
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	3c 01       	movw	r6, r24
 5e6:	f6 01       	movw	r30, r12
 5e8:	93 81       	ldd	r25, Z+3	; 0x03
 5ea:	f7 01       	movw	r30, r14
 5ec:	93 fd       	sbrc	r25, 3
 5ee:	85 91       	lpm	r24, Z+
 5f0:	93 ff       	sbrs	r25, 3
 5f2:	81 91       	ld	r24, Z+
 5f4:	7f 01       	movw	r14, r30
 5f6:	88 23       	and	r24, r24
 5f8:	09 f4       	brne	.+2      	; 0x5fc <vfprintf+0x38>
 5fa:	ad c1       	rjmp	.+858    	; 0x956 <vfprintf+0x392>
 5fc:	85 32       	cpi	r24, 0x25	; 37
 5fe:	39 f4       	brne	.+14     	; 0x60e <vfprintf+0x4a>
 600:	93 fd       	sbrc	r25, 3
 602:	85 91       	lpm	r24, Z+
 604:	93 ff       	sbrs	r25, 3
 606:	81 91       	ld	r24, Z+
 608:	7f 01       	movw	r14, r30
 60a:	85 32       	cpi	r24, 0x25	; 37
 60c:	21 f4       	brne	.+8      	; 0x616 <vfprintf+0x52>
 60e:	b6 01       	movw	r22, r12
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	c0 d1       	rcall	.+896    	; 0x994 <fputc>
 614:	e8 cf       	rjmp	.-48     	; 0x5e6 <vfprintf+0x22>
 616:	91 2c       	mov	r9, r1
 618:	21 2c       	mov	r2, r1
 61a:	31 2c       	mov	r3, r1
 61c:	ff e1       	ldi	r31, 0x1F	; 31
 61e:	f3 15       	cp	r31, r3
 620:	d8 f0       	brcs	.+54     	; 0x658 <vfprintf+0x94>
 622:	8b 32       	cpi	r24, 0x2B	; 43
 624:	79 f0       	breq	.+30     	; 0x644 <vfprintf+0x80>
 626:	38 f4       	brcc	.+14     	; 0x636 <vfprintf+0x72>
 628:	80 32       	cpi	r24, 0x20	; 32
 62a:	79 f0       	breq	.+30     	; 0x64a <vfprintf+0x86>
 62c:	83 32       	cpi	r24, 0x23	; 35
 62e:	a1 f4       	brne	.+40     	; 0x658 <vfprintf+0x94>
 630:	23 2d       	mov	r18, r3
 632:	20 61       	ori	r18, 0x10	; 16
 634:	1d c0       	rjmp	.+58     	; 0x670 <vfprintf+0xac>
 636:	8d 32       	cpi	r24, 0x2D	; 45
 638:	61 f0       	breq	.+24     	; 0x652 <vfprintf+0x8e>
 63a:	80 33       	cpi	r24, 0x30	; 48
 63c:	69 f4       	brne	.+26     	; 0x658 <vfprintf+0x94>
 63e:	23 2d       	mov	r18, r3
 640:	21 60       	ori	r18, 0x01	; 1
 642:	16 c0       	rjmp	.+44     	; 0x670 <vfprintf+0xac>
 644:	83 2d       	mov	r24, r3
 646:	82 60       	ori	r24, 0x02	; 2
 648:	38 2e       	mov	r3, r24
 64a:	e3 2d       	mov	r30, r3
 64c:	e4 60       	ori	r30, 0x04	; 4
 64e:	3e 2e       	mov	r3, r30
 650:	2a c0       	rjmp	.+84     	; 0x6a6 <vfprintf+0xe2>
 652:	f3 2d       	mov	r31, r3
 654:	f8 60       	ori	r31, 0x08	; 8
 656:	1d c0       	rjmp	.+58     	; 0x692 <vfprintf+0xce>
 658:	37 fc       	sbrc	r3, 7
 65a:	2d c0       	rjmp	.+90     	; 0x6b6 <vfprintf+0xf2>
 65c:	20 ed       	ldi	r18, 0xD0	; 208
 65e:	28 0f       	add	r18, r24
 660:	2a 30       	cpi	r18, 0x0A	; 10
 662:	40 f0       	brcs	.+16     	; 0x674 <vfprintf+0xb0>
 664:	8e 32       	cpi	r24, 0x2E	; 46
 666:	b9 f4       	brne	.+46     	; 0x696 <vfprintf+0xd2>
 668:	36 fc       	sbrc	r3, 6
 66a:	75 c1       	rjmp	.+746    	; 0x956 <vfprintf+0x392>
 66c:	23 2d       	mov	r18, r3
 66e:	20 64       	ori	r18, 0x40	; 64
 670:	32 2e       	mov	r3, r18
 672:	19 c0       	rjmp	.+50     	; 0x6a6 <vfprintf+0xe2>
 674:	36 fe       	sbrs	r3, 6
 676:	06 c0       	rjmp	.+12     	; 0x684 <vfprintf+0xc0>
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	98 9e       	mul	r9, r24
 67c:	20 0d       	add	r18, r0
 67e:	11 24       	eor	r1, r1
 680:	92 2e       	mov	r9, r18
 682:	11 c0       	rjmp	.+34     	; 0x6a6 <vfprintf+0xe2>
 684:	ea e0       	ldi	r30, 0x0A	; 10
 686:	2e 9e       	mul	r2, r30
 688:	20 0d       	add	r18, r0
 68a:	11 24       	eor	r1, r1
 68c:	22 2e       	mov	r2, r18
 68e:	f3 2d       	mov	r31, r3
 690:	f0 62       	ori	r31, 0x20	; 32
 692:	3f 2e       	mov	r3, r31
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <vfprintf+0xe2>
 696:	8c 36       	cpi	r24, 0x6C	; 108
 698:	21 f4       	brne	.+8      	; 0x6a2 <vfprintf+0xde>
 69a:	83 2d       	mov	r24, r3
 69c:	80 68       	ori	r24, 0x80	; 128
 69e:	38 2e       	mov	r3, r24
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <vfprintf+0xe2>
 6a2:	88 36       	cpi	r24, 0x68	; 104
 6a4:	41 f4       	brne	.+16     	; 0x6b6 <vfprintf+0xf2>
 6a6:	f7 01       	movw	r30, r14
 6a8:	93 fd       	sbrc	r25, 3
 6aa:	85 91       	lpm	r24, Z+
 6ac:	93 ff       	sbrs	r25, 3
 6ae:	81 91       	ld	r24, Z+
 6b0:	7f 01       	movw	r14, r30
 6b2:	81 11       	cpse	r24, r1
 6b4:	b3 cf       	rjmp	.-154    	; 0x61c <vfprintf+0x58>
 6b6:	98 2f       	mov	r25, r24
 6b8:	9f 7d       	andi	r25, 0xDF	; 223
 6ba:	95 54       	subi	r25, 0x45	; 69
 6bc:	93 30       	cpi	r25, 0x03	; 3
 6be:	28 f4       	brcc	.+10     	; 0x6ca <vfprintf+0x106>
 6c0:	0c 5f       	subi	r16, 0xFC	; 252
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	9f e3       	ldi	r25, 0x3F	; 63
 6c6:	99 83       	std	Y+1, r25	; 0x01
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <vfprintf+0x120>
 6ca:	83 36       	cpi	r24, 0x63	; 99
 6cc:	31 f0       	breq	.+12     	; 0x6da <vfprintf+0x116>
 6ce:	83 37       	cpi	r24, 0x73	; 115
 6d0:	71 f0       	breq	.+28     	; 0x6ee <vfprintf+0x12a>
 6d2:	83 35       	cpi	r24, 0x53	; 83
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <vfprintf+0x114>
 6d6:	55 c0       	rjmp	.+170    	; 0x782 <vfprintf+0x1be>
 6d8:	20 c0       	rjmp	.+64     	; 0x71a <vfprintf+0x156>
 6da:	f8 01       	movw	r30, r16
 6dc:	80 81       	ld	r24, Z
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	0e 5f       	subi	r16, 0xFE	; 254
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	88 24       	eor	r8, r8
 6e6:	83 94       	inc	r8
 6e8:	91 2c       	mov	r9, r1
 6ea:	53 01       	movw	r10, r6
 6ec:	12 c0       	rjmp	.+36     	; 0x712 <vfprintf+0x14e>
 6ee:	28 01       	movw	r4, r16
 6f0:	f2 e0       	ldi	r31, 0x02	; 2
 6f2:	4f 0e       	add	r4, r31
 6f4:	51 1c       	adc	r5, r1
 6f6:	f8 01       	movw	r30, r16
 6f8:	a0 80       	ld	r10, Z
 6fa:	b1 80       	ldd	r11, Z+1	; 0x01
 6fc:	36 fe       	sbrs	r3, 6
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <vfprintf+0x142>
 700:	69 2d       	mov	r22, r9
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x146>
 706:	6f ef       	ldi	r22, 0xFF	; 255
 708:	7f ef       	ldi	r23, 0xFF	; 255
 70a:	c5 01       	movw	r24, r10
 70c:	38 d1       	rcall	.+624    	; 0x97e <strnlen>
 70e:	4c 01       	movw	r8, r24
 710:	82 01       	movw	r16, r4
 712:	f3 2d       	mov	r31, r3
 714:	ff 77       	andi	r31, 0x7F	; 127
 716:	3f 2e       	mov	r3, r31
 718:	15 c0       	rjmp	.+42     	; 0x744 <vfprintf+0x180>
 71a:	28 01       	movw	r4, r16
 71c:	22 e0       	ldi	r18, 0x02	; 2
 71e:	42 0e       	add	r4, r18
 720:	51 1c       	adc	r5, r1
 722:	f8 01       	movw	r30, r16
 724:	a0 80       	ld	r10, Z
 726:	b1 80       	ldd	r11, Z+1	; 0x01
 728:	36 fe       	sbrs	r3, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x16e>
 72c:	69 2d       	mov	r22, r9
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x172>
 732:	6f ef       	ldi	r22, 0xFF	; 255
 734:	7f ef       	ldi	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	17 d1       	rcall	.+558    	; 0x968 <strnlen_P>
 73a:	4c 01       	movw	r8, r24
 73c:	f3 2d       	mov	r31, r3
 73e:	f0 68       	ori	r31, 0x80	; 128
 740:	3f 2e       	mov	r3, r31
 742:	82 01       	movw	r16, r4
 744:	33 fc       	sbrc	r3, 3
 746:	19 c0       	rjmp	.+50     	; 0x77a <vfprintf+0x1b6>
 748:	82 2d       	mov	r24, r2
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	88 16       	cp	r8, r24
 74e:	99 06       	cpc	r9, r25
 750:	a0 f4       	brcc	.+40     	; 0x77a <vfprintf+0x1b6>
 752:	b6 01       	movw	r22, r12
 754:	80 e2       	ldi	r24, 0x20	; 32
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	1d d1       	rcall	.+570    	; 0x994 <fputc>
 75a:	2a 94       	dec	r2
 75c:	f5 cf       	rjmp	.-22     	; 0x748 <vfprintf+0x184>
 75e:	f5 01       	movw	r30, r10
 760:	37 fc       	sbrc	r3, 7
 762:	85 91       	lpm	r24, Z+
 764:	37 fe       	sbrs	r3, 7
 766:	81 91       	ld	r24, Z+
 768:	5f 01       	movw	r10, r30
 76a:	b6 01       	movw	r22, r12
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	12 d1       	rcall	.+548    	; 0x994 <fputc>
 770:	21 10       	cpse	r2, r1
 772:	2a 94       	dec	r2
 774:	21 e0       	ldi	r18, 0x01	; 1
 776:	82 1a       	sub	r8, r18
 778:	91 08       	sbc	r9, r1
 77a:	81 14       	cp	r8, r1
 77c:	91 04       	cpc	r9, r1
 77e:	79 f7       	brne	.-34     	; 0x75e <vfprintf+0x19a>
 780:	e1 c0       	rjmp	.+450    	; 0x944 <vfprintf+0x380>
 782:	84 36       	cpi	r24, 0x64	; 100
 784:	11 f0       	breq	.+4      	; 0x78a <vfprintf+0x1c6>
 786:	89 36       	cpi	r24, 0x69	; 105
 788:	39 f5       	brne	.+78     	; 0x7d8 <vfprintf+0x214>
 78a:	f8 01       	movw	r30, r16
 78c:	37 fe       	sbrs	r3, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x1da>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <vfprintf+0x1ea>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	07 2e       	mov	r0, r23
 7a4:	00 0c       	add	r0, r0
 7a6:	88 0b       	sbc	r24, r24
 7a8:	99 0b       	sbc	r25, r25
 7aa:	0e 5f       	subi	r16, 0xFE	; 254
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	f3 2d       	mov	r31, r3
 7b0:	ff 76       	andi	r31, 0x6F	; 111
 7b2:	3f 2e       	mov	r3, r31
 7b4:	97 ff       	sbrs	r25, 7
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <vfprintf+0x206>
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	f0 68       	ori	r31, 0x80	; 128
 7c8:	3f 2e       	mov	r3, r31
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	a3 01       	movw	r20, r6
 7d0:	1d d1       	rcall	.+570    	; 0xa0c <__ultoa_invert>
 7d2:	88 2e       	mov	r8, r24
 7d4:	86 18       	sub	r8, r6
 7d6:	44 c0       	rjmp	.+136    	; 0x860 <vfprintf+0x29c>
 7d8:	85 37       	cpi	r24, 0x75	; 117
 7da:	31 f4       	brne	.+12     	; 0x7e8 <vfprintf+0x224>
 7dc:	23 2d       	mov	r18, r3
 7de:	2f 7e       	andi	r18, 0xEF	; 239
 7e0:	b2 2e       	mov	r11, r18
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	25 c0       	rjmp	.+74     	; 0x832 <vfprintf+0x26e>
 7e8:	93 2d       	mov	r25, r3
 7ea:	99 7f       	andi	r25, 0xF9	; 249
 7ec:	b9 2e       	mov	r11, r25
 7ee:	8f 36       	cpi	r24, 0x6F	; 111
 7f0:	c1 f0       	breq	.+48     	; 0x822 <vfprintf+0x25e>
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <vfprintf+0x236>
 7f4:	88 35       	cpi	r24, 0x58	; 88
 7f6:	79 f0       	breq	.+30     	; 0x816 <vfprintf+0x252>
 7f8:	ae c0       	rjmp	.+348    	; 0x956 <vfprintf+0x392>
 7fa:	80 37       	cpi	r24, 0x70	; 112
 7fc:	19 f0       	breq	.+6      	; 0x804 <vfprintf+0x240>
 7fe:	88 37       	cpi	r24, 0x78	; 120
 800:	21 f0       	breq	.+8      	; 0x80a <vfprintf+0x246>
 802:	a9 c0       	rjmp	.+338    	; 0x956 <vfprintf+0x392>
 804:	e9 2f       	mov	r30, r25
 806:	e0 61       	ori	r30, 0x10	; 16
 808:	be 2e       	mov	r11, r30
 80a:	b4 fe       	sbrs	r11, 4
 80c:	0d c0       	rjmp	.+26     	; 0x828 <vfprintf+0x264>
 80e:	fb 2d       	mov	r31, r11
 810:	f4 60       	ori	r31, 0x04	; 4
 812:	bf 2e       	mov	r11, r31
 814:	09 c0       	rjmp	.+18     	; 0x828 <vfprintf+0x264>
 816:	34 fe       	sbrs	r3, 4
 818:	0a c0       	rjmp	.+20     	; 0x82e <vfprintf+0x26a>
 81a:	29 2f       	mov	r18, r25
 81c:	26 60       	ori	r18, 0x06	; 6
 81e:	b2 2e       	mov	r11, r18
 820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x26a>
 822:	28 e0       	ldi	r18, 0x08	; 8
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	05 c0       	rjmp	.+10     	; 0x832 <vfprintf+0x26e>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x26e>
 82e:	20 e1       	ldi	r18, 0x10	; 16
 830:	32 e0       	ldi	r19, 0x02	; 2
 832:	f8 01       	movw	r30, r16
 834:	b7 fe       	sbrs	r11, 7
 836:	07 c0       	rjmp	.+14     	; 0x846 <vfprintf+0x282>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	06 c0       	rjmp	.+12     	; 0x852 <vfprintf+0x28e>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	a3 01       	movw	r20, r6
 854:	db d0       	rcall	.+438    	; 0xa0c <__ultoa_invert>
 856:	88 2e       	mov	r8, r24
 858:	86 18       	sub	r8, r6
 85a:	fb 2d       	mov	r31, r11
 85c:	ff 77       	andi	r31, 0x7F	; 127
 85e:	3f 2e       	mov	r3, r31
 860:	36 fe       	sbrs	r3, 6
 862:	0d c0       	rjmp	.+26     	; 0x87e <vfprintf+0x2ba>
 864:	23 2d       	mov	r18, r3
 866:	2e 7f       	andi	r18, 0xFE	; 254
 868:	a2 2e       	mov	r10, r18
 86a:	89 14       	cp	r8, r9
 86c:	58 f4       	brcc	.+22     	; 0x884 <vfprintf+0x2c0>
 86e:	34 fe       	sbrs	r3, 4
 870:	0b c0       	rjmp	.+22     	; 0x888 <vfprintf+0x2c4>
 872:	32 fc       	sbrc	r3, 2
 874:	09 c0       	rjmp	.+18     	; 0x888 <vfprintf+0x2c4>
 876:	83 2d       	mov	r24, r3
 878:	8e 7e       	andi	r24, 0xEE	; 238
 87a:	a8 2e       	mov	r10, r24
 87c:	05 c0       	rjmp	.+10     	; 0x888 <vfprintf+0x2c4>
 87e:	b8 2c       	mov	r11, r8
 880:	a3 2c       	mov	r10, r3
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x2c6>
 884:	b8 2c       	mov	r11, r8
 886:	01 c0       	rjmp	.+2      	; 0x88a <vfprintf+0x2c6>
 888:	b9 2c       	mov	r11, r9
 88a:	a4 fe       	sbrs	r10, 4
 88c:	0f c0       	rjmp	.+30     	; 0x8ac <vfprintf+0x2e8>
 88e:	fe 01       	movw	r30, r28
 890:	e8 0d       	add	r30, r8
 892:	f1 1d       	adc	r31, r1
 894:	80 81       	ld	r24, Z
 896:	80 33       	cpi	r24, 0x30	; 48
 898:	21 f4       	brne	.+8      	; 0x8a2 <vfprintf+0x2de>
 89a:	9a 2d       	mov	r25, r10
 89c:	99 7e       	andi	r25, 0xE9	; 233
 89e:	a9 2e       	mov	r10, r25
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <vfprintf+0x2f0>
 8a2:	a2 fe       	sbrs	r10, 2
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <vfprintf+0x2ee>
 8a6:	b3 94       	inc	r11
 8a8:	b3 94       	inc	r11
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <vfprintf+0x2f0>
 8ac:	8a 2d       	mov	r24, r10
 8ae:	86 78       	andi	r24, 0x86	; 134
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <vfprintf+0x2f0>
 8b2:	b3 94       	inc	r11
 8b4:	a3 fc       	sbrc	r10, 3
 8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <vfprintf+0x314>
 8b8:	a0 fe       	sbrs	r10, 0
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x304>
 8bc:	b2 14       	cp	r11, r2
 8be:	80 f4       	brcc	.+32     	; 0x8e0 <vfprintf+0x31c>
 8c0:	28 0c       	add	r2, r8
 8c2:	92 2c       	mov	r9, r2
 8c4:	9b 18       	sub	r9, r11
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <vfprintf+0x31e>
 8c8:	b2 14       	cp	r11, r2
 8ca:	58 f4       	brcc	.+22     	; 0x8e2 <vfprintf+0x31e>
 8cc:	b6 01       	movw	r22, r12
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	60 d0       	rcall	.+192    	; 0x994 <fputc>
 8d4:	b3 94       	inc	r11
 8d6:	f8 cf       	rjmp	.-16     	; 0x8c8 <vfprintf+0x304>
 8d8:	b2 14       	cp	r11, r2
 8da:	18 f4       	brcc	.+6      	; 0x8e2 <vfprintf+0x31e>
 8dc:	2b 18       	sub	r2, r11
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <vfprintf+0x320>
 8e0:	98 2c       	mov	r9, r8
 8e2:	21 2c       	mov	r2, r1
 8e4:	a4 fe       	sbrs	r10, 4
 8e6:	0f c0       	rjmp	.+30     	; 0x906 <vfprintf+0x342>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	52 d0       	rcall	.+164    	; 0x994 <fputc>
 8f0:	a2 fe       	sbrs	r10, 2
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <vfprintf+0x35c>
 8f4:	a1 fc       	sbrc	r10, 1
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x33a>
 8f8:	88 e7       	ldi	r24, 0x78	; 120
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x33e>
 8fe:	88 e5       	ldi	r24, 0x58	; 88
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	b6 01       	movw	r22, r12
 904:	0c c0       	rjmp	.+24     	; 0x91e <vfprintf+0x35a>
 906:	8a 2d       	mov	r24, r10
 908:	86 78       	andi	r24, 0x86	; 134
 90a:	51 f0       	breq	.+20     	; 0x920 <vfprintf+0x35c>
 90c:	a1 fe       	sbrs	r10, 1
 90e:	02 c0       	rjmp	.+4      	; 0x914 <vfprintf+0x350>
 910:	8b e2       	ldi	r24, 0x2B	; 43
 912:	01 c0       	rjmp	.+2      	; 0x916 <vfprintf+0x352>
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	a7 fc       	sbrc	r10, 7
 918:	8d e2       	ldi	r24, 0x2D	; 45
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	3a d0       	rcall	.+116    	; 0x994 <fputc>
 920:	89 14       	cp	r8, r9
 922:	30 f4       	brcc	.+12     	; 0x930 <vfprintf+0x36c>
 924:	b6 01       	movw	r22, r12
 926:	80 e3       	ldi	r24, 0x30	; 48
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	34 d0       	rcall	.+104    	; 0x994 <fputc>
 92c:	9a 94       	dec	r9
 92e:	f8 cf       	rjmp	.-16     	; 0x920 <vfprintf+0x35c>
 930:	8a 94       	dec	r8
 932:	f3 01       	movw	r30, r6
 934:	e8 0d       	add	r30, r8
 936:	f1 1d       	adc	r31, r1
 938:	80 81       	ld	r24, Z
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	2a d0       	rcall	.+84     	; 0x994 <fputc>
 940:	81 10       	cpse	r8, r1
 942:	f6 cf       	rjmp	.-20     	; 0x930 <vfprintf+0x36c>
 944:	22 20       	and	r2, r2
 946:	09 f4       	brne	.+2      	; 0x94a <vfprintf+0x386>
 948:	4e ce       	rjmp	.-868    	; 0x5e6 <vfprintf+0x22>
 94a:	b6 01       	movw	r22, r12
 94c:	80 e2       	ldi	r24, 0x20	; 32
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	21 d0       	rcall	.+66     	; 0x994 <fputc>
 952:	2a 94       	dec	r2
 954:	f7 cf       	rjmp	.-18     	; 0x944 <vfprintf+0x380>
 956:	f6 01       	movw	r30, r12
 958:	86 81       	ldd	r24, Z+6	; 0x06
 95a:	97 81       	ldd	r25, Z+7	; 0x07
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x39e>
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	9f ef       	ldi	r25, 0xFF	; 255
 962:	2b 96       	adiw	r28, 0x0b	; 11
 964:	e2 e1       	ldi	r30, 0x12	; 18
 966:	c9 c0       	rjmp	.+402    	; 0xafa <__epilogue_restores__>

00000968 <strnlen_P>:
 968:	fc 01       	movw	r30, r24
 96a:	05 90       	lpm	r0, Z+
 96c:	61 50       	subi	r22, 0x01	; 1
 96e:	70 40       	sbci	r23, 0x00	; 0
 970:	01 10       	cpse	r0, r1
 972:	d8 f7       	brcc	.-10     	; 0x96a <strnlen_P+0x2>
 974:	80 95       	com	r24
 976:	90 95       	com	r25
 978:	8e 0f       	add	r24, r30
 97a:	9f 1f       	adc	r25, r31
 97c:	08 95       	ret

0000097e <strnlen>:
 97e:	fc 01       	movw	r30, r24
 980:	61 50       	subi	r22, 0x01	; 1
 982:	70 40       	sbci	r23, 0x00	; 0
 984:	01 90       	ld	r0, Z+
 986:	01 10       	cpse	r0, r1
 988:	d8 f7       	brcc	.-10     	; 0x980 <strnlen+0x2>
 98a:	80 95       	com	r24
 98c:	90 95       	com	r25
 98e:	8e 0f       	add	r24, r30
 990:	9f 1f       	adc	r25, r31
 992:	08 95       	ret

00000994 <fputc>:
 994:	0f 93       	push	r16
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	fb 01       	movw	r30, r22
 99e:	23 81       	ldd	r18, Z+3	; 0x03
 9a0:	21 fd       	sbrc	r18, 1
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <fputc+0x16>
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	2c c0       	rjmp	.+88     	; 0xa02 <fputc+0x6e>
 9aa:	22 ff       	sbrs	r18, 2
 9ac:	16 c0       	rjmp	.+44     	; 0x9da <fputc+0x46>
 9ae:	46 81       	ldd	r20, Z+6	; 0x06
 9b0:	57 81       	ldd	r21, Z+7	; 0x07
 9b2:	24 81       	ldd	r18, Z+4	; 0x04
 9b4:	35 81       	ldd	r19, Z+5	; 0x05
 9b6:	42 17       	cp	r20, r18
 9b8:	53 07       	cpc	r21, r19
 9ba:	44 f4       	brge	.+16     	; 0x9cc <fputc+0x38>
 9bc:	a0 81       	ld	r26, Z
 9be:	b1 81       	ldd	r27, Z+1	; 0x01
 9c0:	9d 01       	movw	r18, r26
 9c2:	2f 5f       	subi	r18, 0xFF	; 255
 9c4:	3f 4f       	sbci	r19, 0xFF	; 255
 9c6:	20 83       	st	Z, r18
 9c8:	31 83       	std	Z+1, r19	; 0x01
 9ca:	8c 93       	st	X, r24
 9cc:	26 81       	ldd	r18, Z+6	; 0x06
 9ce:	37 81       	ldd	r19, Z+7	; 0x07
 9d0:	2f 5f       	subi	r18, 0xFF	; 255
 9d2:	3f 4f       	sbci	r19, 0xFF	; 255
 9d4:	26 83       	std	Z+6, r18	; 0x06
 9d6:	37 83       	std	Z+7, r19	; 0x07
 9d8:	14 c0       	rjmp	.+40     	; 0xa02 <fputc+0x6e>
 9da:	8b 01       	movw	r16, r22
 9dc:	ec 01       	movw	r28, r24
 9de:	fb 01       	movw	r30, r22
 9e0:	00 84       	ldd	r0, Z+8	; 0x08
 9e2:	f1 85       	ldd	r31, Z+9	; 0x09
 9e4:	e0 2d       	mov	r30, r0
 9e6:	09 95       	icall
 9e8:	89 2b       	or	r24, r25
 9ea:	e1 f6       	brne	.-72     	; 0x9a4 <fputc+0x10>
 9ec:	d8 01       	movw	r26, r16
 9ee:	16 96       	adiw	r26, 0x06	; 6
 9f0:	8d 91       	ld	r24, X+
 9f2:	9c 91       	ld	r25, X
 9f4:	17 97       	sbiw	r26, 0x07	; 7
 9f6:	01 96       	adiw	r24, 0x01	; 1
 9f8:	16 96       	adiw	r26, 0x06	; 6
 9fa:	8d 93       	st	X+, r24
 9fc:	9c 93       	st	X, r25
 9fe:	17 97       	sbiw	r26, 0x07	; 7
 a00:	ce 01       	movw	r24, r28
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	0f 91       	pop	r16
 a0a:	08 95       	ret

00000a0c <__ultoa_invert>:
 a0c:	fa 01       	movw	r30, r20
 a0e:	aa 27       	eor	r26, r26
 a10:	28 30       	cpi	r18, 0x08	; 8
 a12:	51 f1       	breq	.+84     	; 0xa68 <__ultoa_invert+0x5c>
 a14:	20 31       	cpi	r18, 0x10	; 16
 a16:	81 f1       	breq	.+96     	; 0xa78 <__ultoa_invert+0x6c>
 a18:	e8 94       	clt
 a1a:	6f 93       	push	r22
 a1c:	6e 7f       	andi	r22, 0xFE	; 254
 a1e:	6e 5f       	subi	r22, 0xFE	; 254
 a20:	7f 4f       	sbci	r23, 0xFF	; 255
 a22:	8f 4f       	sbci	r24, 0xFF	; 255
 a24:	9f 4f       	sbci	r25, 0xFF	; 255
 a26:	af 4f       	sbci	r26, 0xFF	; 255
 a28:	b1 e0       	ldi	r27, 0x01	; 1
 a2a:	3e d0       	rcall	.+124    	; 0xaa8 <__ultoa_invert+0x9c>
 a2c:	b4 e0       	ldi	r27, 0x04	; 4
 a2e:	3c d0       	rcall	.+120    	; 0xaa8 <__ultoa_invert+0x9c>
 a30:	67 0f       	add	r22, r23
 a32:	78 1f       	adc	r23, r24
 a34:	89 1f       	adc	r24, r25
 a36:	9a 1f       	adc	r25, r26
 a38:	a1 1d       	adc	r26, r1
 a3a:	68 0f       	add	r22, r24
 a3c:	79 1f       	adc	r23, r25
 a3e:	8a 1f       	adc	r24, r26
 a40:	91 1d       	adc	r25, r1
 a42:	a1 1d       	adc	r26, r1
 a44:	6a 0f       	add	r22, r26
 a46:	71 1d       	adc	r23, r1
 a48:	81 1d       	adc	r24, r1
 a4a:	91 1d       	adc	r25, r1
 a4c:	a1 1d       	adc	r26, r1
 a4e:	20 d0       	rcall	.+64     	; 0xa90 <__ultoa_invert+0x84>
 a50:	09 f4       	brne	.+2      	; 0xa54 <__ultoa_invert+0x48>
 a52:	68 94       	set
 a54:	3f 91       	pop	r19
 a56:	2a e0       	ldi	r18, 0x0A	; 10
 a58:	26 9f       	mul	r18, r22
 a5a:	11 24       	eor	r1, r1
 a5c:	30 19       	sub	r19, r0
 a5e:	30 5d       	subi	r19, 0xD0	; 208
 a60:	31 93       	st	Z+, r19
 a62:	de f6       	brtc	.-74     	; 0xa1a <__ultoa_invert+0xe>
 a64:	cf 01       	movw	r24, r30
 a66:	08 95       	ret
 a68:	46 2f       	mov	r20, r22
 a6a:	47 70       	andi	r20, 0x07	; 7
 a6c:	40 5d       	subi	r20, 0xD0	; 208
 a6e:	41 93       	st	Z+, r20
 a70:	b3 e0       	ldi	r27, 0x03	; 3
 a72:	0f d0       	rcall	.+30     	; 0xa92 <__ultoa_invert+0x86>
 a74:	c9 f7       	brne	.-14     	; 0xa68 <__ultoa_invert+0x5c>
 a76:	f6 cf       	rjmp	.-20     	; 0xa64 <__ultoa_invert+0x58>
 a78:	46 2f       	mov	r20, r22
 a7a:	4f 70       	andi	r20, 0x0F	; 15
 a7c:	40 5d       	subi	r20, 0xD0	; 208
 a7e:	4a 33       	cpi	r20, 0x3A	; 58
 a80:	18 f0       	brcs	.+6      	; 0xa88 <__ultoa_invert+0x7c>
 a82:	49 5d       	subi	r20, 0xD9	; 217
 a84:	31 fd       	sbrc	r19, 1
 a86:	40 52       	subi	r20, 0x20	; 32
 a88:	41 93       	st	Z+, r20
 a8a:	02 d0       	rcall	.+4      	; 0xa90 <__ultoa_invert+0x84>
 a8c:	a9 f7       	brne	.-22     	; 0xa78 <__ultoa_invert+0x6c>
 a8e:	ea cf       	rjmp	.-44     	; 0xa64 <__ultoa_invert+0x58>
 a90:	b4 e0       	ldi	r27, 0x04	; 4
 a92:	a6 95       	lsr	r26
 a94:	97 95       	ror	r25
 a96:	87 95       	ror	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	ba 95       	dec	r27
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__ultoa_invert+0x86>
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	61 05       	cpc	r22, r1
 aa4:	71 05       	cpc	r23, r1
 aa6:	08 95       	ret
 aa8:	9b 01       	movw	r18, r22
 aaa:	ac 01       	movw	r20, r24
 aac:	0a 2e       	mov	r0, r26
 aae:	06 94       	lsr	r0
 ab0:	57 95       	ror	r21
 ab2:	47 95       	ror	r20
 ab4:	37 95       	ror	r19
 ab6:	27 95       	ror	r18
 ab8:	ba 95       	dec	r27
 aba:	c9 f7       	brne	.-14     	; 0xaae <__ultoa_invert+0xa2>
 abc:	62 0f       	add	r22, r18
 abe:	73 1f       	adc	r23, r19
 ac0:	84 1f       	adc	r24, r20
 ac2:	95 1f       	adc	r25, r21
 ac4:	a0 1d       	adc	r26, r0
 ac6:	08 95       	ret

00000ac8 <__prologue_saves__>:
 ac8:	2f 92       	push	r2
 aca:	3f 92       	push	r3
 acc:	4f 92       	push	r4
 ace:	5f 92       	push	r5
 ad0:	6f 92       	push	r6
 ad2:	7f 92       	push	r7
 ad4:	8f 92       	push	r8
 ad6:	9f 92       	push	r9
 ad8:	af 92       	push	r10
 ada:	bf 92       	push	r11
 adc:	cf 92       	push	r12
 ade:	df 92       	push	r13
 ae0:	ef 92       	push	r14
 ae2:	ff 92       	push	r15
 ae4:	0f 93       	push	r16
 ae6:	1f 93       	push	r17
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
 af0:	ca 1b       	sub	r28, r26
 af2:	db 0b       	sbc	r29, r27
 af4:	cd bf       	out	0x3d, r28	; 61
 af6:	de bf       	out	0x3e, r29	; 62
 af8:	09 94       	ijmp

00000afa <__epilogue_restores__>:
 afa:	2a 88       	ldd	r2, Y+18	; 0x12
 afc:	39 88       	ldd	r3, Y+17	; 0x11
 afe:	48 88       	ldd	r4, Y+16	; 0x10
 b00:	5f 84       	ldd	r5, Y+15	; 0x0f
 b02:	6e 84       	ldd	r6, Y+14	; 0x0e
 b04:	7d 84       	ldd	r7, Y+13	; 0x0d
 b06:	8c 84       	ldd	r8, Y+12	; 0x0c
 b08:	9b 84       	ldd	r9, Y+11	; 0x0b
 b0a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b0c:	b9 84       	ldd	r11, Y+9	; 0x09
 b0e:	c8 84       	ldd	r12, Y+8	; 0x08
 b10:	df 80       	ldd	r13, Y+7	; 0x07
 b12:	ee 80       	ldd	r14, Y+6	; 0x06
 b14:	fd 80       	ldd	r15, Y+5	; 0x05
 b16:	0c 81       	ldd	r16, Y+4	; 0x04
 b18:	1b 81       	ldd	r17, Y+3	; 0x03
 b1a:	aa 81       	ldd	r26, Y+2	; 0x02
 b1c:	b9 81       	ldd	r27, Y+1	; 0x01
 b1e:	ce 0f       	add	r28, r30
 b20:	d1 1d       	adc	r29, r1
 b22:	cd bf       	out	0x3d, r28	; 61
 b24:	de bf       	out	0x3e, r29	; 62
 b26:	ed 01       	movw	r28, r26
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
